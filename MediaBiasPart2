{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNNSbJRalYQdaBSJ6iPe0oO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###Libraries"],"metadata":{"id":"8hi_RApQPTWt"}},{"cell_type":"code","source":["# Install the textblob module if it's not already installed\n","!pip install textblob\n","\n","# Import the TextBlob function from the textblob module\n","from textblob import TextBlob"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Upaqf2QwnCrd","outputId":"55795df8-cb52-4b1c-e51b-2db5b2cb6efd","executionInfo":{"status":"ok","timestamp":1717392228198,"user_tz":-480,"elapsed":7469,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}}},"execution_count":101,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: textblob in /usr/local/lib/python3.10/dist-packages (0.17.1)\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.10/dist-packages (from textblob) (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (1.4.2)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (2024.5.15)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (4.66.4)\n"]}]},{"cell_type":"code","source":["%pip install nltk -U\n","%pip install spacy -U\n","%pip install gensim\n","%pip install pyldavis\n","%pip install pandas\n","\n","import requests\n","from bs4 import BeautifulSoup\n","import json\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from urllib.parse import urljoin\n","import os\n","import nltk\n","import re\n","import string\n","import gensim\n","import numpy as np\n","import pandas as pd\n","\n","# for tokenization\n","from nltk.tokenize import word_tokenize\n","nltk.download(\"punkt\")\n","nltk.download('wordnet')\n","\n","# for stopword removal\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","\n","# for lemmatization and POS tagging\n","from nltk.stem import WordNetLemmatizer\n","from nltk.corpus import wordnet\n","nltk.download('averaged_perceptron_tagger')\n","import spacy\n","from spacy.tokenizer import Tokenizer\n","import en_core_web_sm\n","from nltk.corpus import wordnet_pos_tags\n","\n","# for LDA\n","from gensim import corpora\n","from gensim.models import LdaModel\n","from gensim.models.coherencemodel import CoherenceModel\n","\n","# for LDA evaluation\n","import pyLDAvis\n","import pyLDAvis.gensim_models as gensimvisualize"],"metadata":{"id":"I4M228SNnEcV","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1717392354499,"user_tz":-480,"elapsed":51339,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"d11593e5-d30e-41c2-d640-f96cf77e9cc2"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.4.2)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2024.5.15)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.66.4)\n","Requirement already satisfied: spacy in /usr/local/lib/python3.10/dist-packages (3.7.4)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (8.2.3)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n","Requirement already satisfied: weasel<0.4.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.3.4)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.9.4)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (6.4.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (4.66.4)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.31.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.7.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.1.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy) (67.7.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (24.0)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.4.0)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.25.2)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.18.2 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (2.18.2)\n","Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2024.2.2)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.1.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy) (8.1.7)\n","Requirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.4.0,>=0.1.0->spacy) (0.16.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy) (2.1.5)\n","Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy) (1.1.1)\n","Requirement already satisfied: gensim in /usr/local/lib/python3.10/dist-packages (4.3.2)\n","Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.25.2)\n","Requirement already satisfied: scipy>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.11.4)\n","Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from gensim) (6.4.0)\n","Requirement already satisfied: pyldavis in /usr/local/lib/python3.10/dist-packages (3.4.1)\n","Requirement already satisfied: numpy>=1.24.2 in /usr/local/lib/python3.10/dist-packages (from pyldavis) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pyldavis) (1.11.4)\n","Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from pyldavis) (2.0.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pyldavis) (1.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from pyldavis) (3.1.4)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.10/dist-packages (from pyldavis) (2.10.0)\n","Requirement already satisfied: funcy in /usr/local/lib/python3.10/dist-packages (from pyldavis) (2.0)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pyldavis) (1.2.2)\n","Requirement already satisfied: gensim in /usr/local/lib/python3.10/dist-packages (from pyldavis) (4.3.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from pyldavis) (67.7.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyldavis) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyldavis) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyldavis) (2024.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->pyldavis) (3.5.0)\n","Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from gensim->pyldavis) (6.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->pyldavis) (2.1.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->pyldavis) (1.16.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n","[nltk_data]       date!\n"]},{"output_type":"error","ename":"ImportError","evalue":"cannot import name 'wordnet_pos_tags' from 'nltk.corpus' (/usr/local/lib/python3.10/dist-packages/nltk/corpus/__init__.py)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-103-d61ed8ba89e1>\u001b[0m in \u001b[0;36m<cell line: 37>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mspacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenizer\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTokenizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0men_core_web_sm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorpus\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwordnet_pos_tags\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# for LDA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'wordnet_pos_tags' from 'nltk.corpus' (/usr/local/lib/python3.10/dist-packages/nltk/corpus/__init__.py)"]}]},{"cell_type":"code","source":["!pip install spacy\n","!python -m spacy download en_core_web_sm\n"],"metadata":{"id":"gI7uYcfHoRJV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717392403645,"user_tz":-480,"elapsed":40833,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"8ba15ed5-443c-484b-ede3-d107d38efc73"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: spacy in /usr/local/lib/python3.10/dist-packages (3.7.4)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (8.2.3)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n","Requirement already satisfied: weasel<0.4.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.3.4)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.9.4)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (6.4.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (4.66.4)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.31.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.7.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.1.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy) (67.7.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (24.0)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.4.0)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.25.2)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.18.2 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (2.18.2)\n","Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2024.2.2)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.1.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy) (8.1.7)\n","Requirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.4.0,>=0.1.0->spacy) (0.16.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy) (2.1.5)\n","Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy) (1.1.1)\n","Collecting en-core-web-sm==3.7.1\n","  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.1/en_core_web_sm-3.7.1-py3-none-any.whl (12.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.8/12.8 MB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: spacy<3.8.0,>=3.7.2 in /usr/local/lib/python3.10/dist-packages (from en-core-web-sm==3.7.1) (3.7.4)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (8.2.3)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.0.10)\n","Requirement already satisfied: weasel<0.4.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.3.4)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.9.4)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (6.4.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (4.66.4)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.31.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.7.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.1.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (67.7.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (24.0)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.4.0)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.25.2)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.2.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.18.2 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.18.2)\n","Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2024.2.2)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.1.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (8.1.7)\n","Requirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.4.0,>=0.1.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.16.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.1.5)\n","Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.1.1)\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_sm')\n","\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n","If you are in a Jupyter or Colab notebook, you may need to restart Python in\n","order to load all the package's dependencies. You can do this by selecting the\n","'Restart kernel' or 'Restart runtime' option.\n"]}]},{"cell_type":"code","source":["import spacy\n","import pandas as pd\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3mubFM0xotKI","executionInfo":{"status":"ok","timestamp":1717392403646,"user_tz":-480,"elapsed":15,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"9fc01f16-8f4f-45de-9e62-8f8d76730cc1"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["!pip install nltk"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XLampG49DMR_","executionInfo":{"status":"ok","timestamp":1717392411890,"user_tz":-480,"elapsed":8255,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"dd6d127b-c14b-444b-f7af-f893c2dfb329"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.4.2)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2024.5.15)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.66.4)\n"]}]},{"cell_type":"markdown","source":["###Data"],"metadata":{"id":"GWLUEUbrPWkw"}},{"cell_type":"code","execution_count":107,"metadata":{"id":"-y1pm-DZmlJK","colab":{"base_uri":"https://localhost:8080/","height":493},"executionInfo":{"status":"ok","timestamp":1717392412417,"user_tz":-480,"elapsed":535,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"fa1e0515-6c5a-4a88-9314-2f0185a15e57"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                 title  \\\n","0    Donald Trump joins TikTok after reversal on ap...   \n","1    Trump's guilty verdict: A stress test for demo...   \n","2    Views of Trump trial unchanged following verdi...   \n","3    Fact checking Trump's remarks after historic c...   \n","4    DNC files complaint alleging shady fundraising...   \n","..                                                 ...   \n","491  Predictions, predilections, and Indian general...   \n","492  Lok Sabha elections 2024: How many candidates ...   \n","493  Beyond the Lines | Indian elections: What the ...   \n","494  Busy dousing fire on Swati Maliwal 'assault' r...   \n","495  How Swati Maliwal row is disrupting Arvind Kej...   \n","\n","                                                  href  \\\n","0    https://www.cbsnews.com/news/donald-trump-join...   \n","1    https://www.cbsnews.com/news/trumps-guilty-ver...   \n","2    https://www.cbsnews.com/news/trump-verdict-new...   \n","3    https://www.cbsnews.com/news/fact-check-trump-...   \n","4    https://www.cbsnews.com/news/rfk-jr-super-pac-...   \n","..                                                 ...   \n","491  https://www.firstpost.com/opinion/predictions-...   \n","492  https://www.firstpost.com/explainers/lok-sabha...   \n","493  https://www.firstpost.com/opinion/beyond-the-l...   \n","494  https://www.firstpost.com/india/busy-dousing-f...   \n","495  https://www.firstpost.com/explainers/swati-mal...   \n","\n","                                               summary  \\\n","0    While in office, Trump took issue with the soc...   \n","1    Being found guilty of 34 felony counts would n...   \n","2    Half the country says Trump is not fit to be p...   \n","3    CBS News fact checked four misleading claims T...   \n","4    The Democratic National Committee accuses the ...   \n","..                                                 ...   \n","491  Election predictions are notoriously hard due ...   \n","492  A comprehensive analysis of the Association fo...   \n","493  Not only are the Indian general elections the ...   \n","494  Amid the escalating blame game, the focus abru...   \n","495  While Arvind Kejriwal&rsquo;s release from jai...   \n","\n","                                          article_text news_source country  \n","0    Washington — Former President Donald Trump has...     CBSnews      US  \n","1    Historic … unprecedented … and guilty. You cou...     CBSnews      US  \n","2    Views about former President Donald Trump's Ne...     CBSnews      US  \n","3    Former President Donald Trump's Manhattan crim...     CBSnews      US  \n","4    The Democratic National Committee this week fi...     CBSnews      US  \n","..                                                 ...         ...     ...  \n","491  Predictions are awfully difficult, even with t...   Firstpost   India  \n","492  The Lok Sabha election in India is nearing its...   Firstpost   India  \n","493  This was going to be the global election year ...   Firstpost   India  \n","494  When the Supreme Court granted interim bail to...   Firstpost   India  \n","495  Arvind Kejriwal must have felt great relief wh...   Firstpost   India  \n","\n","[496 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-a4ebe28e-8957-4fa5-a0fe-a5e2034f13da\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>href</th>\n","      <th>summary</th>\n","      <th>article_text</th>\n","      <th>news_source</th>\n","      <th>country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Donald Trump joins TikTok after reversal on ap...</td>\n","      <td>https://www.cbsnews.com/news/donald-trump-join...</td>\n","      <td>While in office, Trump took issue with the soc...</td>\n","      <td>Washington — Former President Donald Trump has...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Trump's guilty verdict: A stress test for demo...</td>\n","      <td>https://www.cbsnews.com/news/trumps-guilty-ver...</td>\n","      <td>Being found guilty of 34 felony counts would n...</td>\n","      <td>Historic … unprecedented … and guilty. You cou...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Views of Trump trial unchanged following verdi...</td>\n","      <td>https://www.cbsnews.com/news/trump-verdict-new...</td>\n","      <td>Half the country says Trump is not fit to be p...</td>\n","      <td>Views about former President Donald Trump's Ne...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fact checking Trump's remarks after historic c...</td>\n","      <td>https://www.cbsnews.com/news/fact-check-trump-...</td>\n","      <td>CBS News fact checked four misleading claims T...</td>\n","      <td>Former President Donald Trump's Manhattan crim...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>DNC files complaint alleging shady fundraising...</td>\n","      <td>https://www.cbsnews.com/news/rfk-jr-super-pac-...</td>\n","      <td>The Democratic National Committee accuses the ...</td>\n","      <td>The Democratic National Committee this week fi...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>Predictions, predilections, and Indian general...</td>\n","      <td>https://www.firstpost.com/opinion/predictions-...</td>\n","      <td>Election predictions are notoriously hard due ...</td>\n","      <td>Predictions are awfully difficult, even with t...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","    </tr>\n","    <tr>\n","      <th>492</th>\n","      <td>Lok Sabha elections 2024: How many candidates ...</td>\n","      <td>https://www.firstpost.com/explainers/lok-sabha...</td>\n","      <td>A comprehensive analysis of the Association fo...</td>\n","      <td>The Lok Sabha election in India is nearing its...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","    </tr>\n","    <tr>\n","      <th>493</th>\n","      <td>Beyond the Lines | Indian elections: What the ...</td>\n","      <td>https://www.firstpost.com/opinion/beyond-the-l...</td>\n","      <td>Not only are the Indian general elections the ...</td>\n","      <td>This was going to be the global election year ...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","    </tr>\n","    <tr>\n","      <th>494</th>\n","      <td>Busy dousing fire on Swati Maliwal 'assault' r...</td>\n","      <td>https://www.firstpost.com/india/busy-dousing-f...</td>\n","      <td>Amid the escalating blame game, the focus abru...</td>\n","      <td>When the Supreme Court granted interim bail to...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>How Swati Maliwal row is disrupting Arvind Kej...</td>\n","      <td>https://www.firstpost.com/explainers/swati-mal...</td>\n","      <td>While Arvind Kejriwal&amp;rsquo;s release from jai...</td>\n","      <td>Arvind Kejriwal must have felt great relief wh...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>496 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4ebe28e-8957-4fa5-a0fe-a5e2034f13da')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a4ebe28e-8957-4fa5-a0fe-a5e2034f13da button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a4ebe28e-8957-4fa5-a0fe-a5e2034f13da');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-626514e6-9657-4d56-acf1-5aa353b45f88\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-626514e6-9657-4d56-acf1-5aa353b45f88')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-626514e6-9657-4d56-acf1-5aa353b45f88 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e05d0746-44ea-40e8-941e-3ca7f9576e25\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e05d0746-44ea-40e8-941e-3ca7f9576e25 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 496,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 354,\n        \"samples\": [\n          \"Chhattisgarh's Raipur Lok Sabha Election 2024: Date of voting, result, candidates, main parties, schedule\",\n          \"The FDA is weighing approval of MDMA for PTSD. Here's what patients could see.\",\n          \"Congress delegation meets ECI demanding re-poll in Tripura West\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"href\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 367,\n        \"samples\": [\n          \"https://timesofindia.indiatimes.com/elections/lok-sabha-elections/tamil-nadu/news/tamil-nadu-lok-sabha-exit-poll-results-dmk-expected-to-bag-26-seats-bjp-nda-may-open-account/articleshow/110622750.cms\",\n          \"https://www.cbsnews.com/news/rupert-murdoch-marries-5th-time-elena-zhukova/\",\n          \"https://www.cbsnews.com/news/nato-allies-brace-possible-trump-president/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 250,\n        \"samples\": [\n          \"Former Calcutta High Court judge Abhijit Ganguly barred by Election Commission for offensive remarks against Mamata Banerjee in West Bengal. BJP candidate censured for violating Model Code of Conduct in Tamluk campaign, prompting action from EC and criticism from opponent Trinamool. Trinamool youth leader Debangshu Bhattacharya condemns Ganguly's comments and calls out BJP's behavior.\",\n          \"President Biden said the \\\"American principle that no one is above the law was reaffirmed\\\" after Trump was convicted on 34 felony counts of falsifying business records.\",\n          \"Pens, water bottles, spy cameras, button cameras, mobile phones and other electronic gadgets will not be allowed into the counting venue, says SP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"article_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 348,\n        \"samples\": [\n          \"NEW DELHI: As Manipur burns due to ethnic violence for more than two months, another northeastern state of Mizoram came into focus on Tuesday. While top Congress leaders held a meeting on Mizoram with state party leaders, chief minister issued a fervent appeal for restoration of peace and normalcy in Manipur. Mizoram will go to election later this year along with four other states - Madhya Pradesh, Rajasthan, Telangana and Chhattisgarh. In a meeting on Mizoram held in the national capital, president Mallikarjun Kharge , former president Shri Rahul Gandhi , general secretary (organisation) KC Venugopal, Mizoram in-charge Bhakta Charan Dass and leaders from that state participated at All India Congress Committee (AICC) headquarters. Later, Kharge, in a tweet, said, \\u201cOur fellow citizens of Mizoram desire change. Congress party has a record of providing stability and progress in the state, and @INCMizoram is once again ready to herald a new era of development and welfare in Mizoram. We will do everything possible to work towards that.\\u201d Venugopal, in a tweet, said, \\\"Attended the strategy meeting for the upcoming Mizoram assembly elections at AICC HQ, headed by AICC president Mallikarjun Kharge along with Rahul Gandhi. The BJP and NEDA (Northeast Development Agency) have completely ruined the Northeast . The Congress is the only party that can serve the true interests of Mizoram as well as all other northeastern states.\\\" Coincidentally, perhaps, Mizoram CM Zoramthanga posted a long tweet raising concern over the continued violence in the neighbouring state of Manipur and seeking help from the Centre for the refugees from that state as well as bordering Myanmar and Bangladesh. Zoramthanga started by saying that the onset of May witnessed a brutal, untoward and uncalled-for incident in Manipur. \\u201cAt this very moment, 3:30 am, July 4, 2023; nothing seems to have changed. We are counting, and today is the 62nd day.\\u201d The Mizoram CM said, \\u201cWhile we hope with much goodwill, anticipation and hope, things would turn for the better, situations seem to have worsened. When will it stop? I condole my Manipuri Zo ethnic brethen, my incessant prayers for those who have lost their loved ones, their homes and families wrecked in shatters. May the gracious Lord give you the strength and the wisdom to navigate through this disastrous incident.\\u201d Zoramthanga said he did not wish to see anymore pictures and video clips of churches being burnt, brutal killings and violence of all nature, regardless of gender and age. \\u201cIf there is only one way of settling for peace, shall we opt for that? Many lives have been lost, bloodshed all over, physical torture and the victims are looking for refuge wherever possible. With no iota of doubt, those victims are my kin and kin, my own blood and should we quieten the situation by just being silent? I don't think so!\\u201d He said he would like to call for immediate restoration of peace and normalcy. It is incumbent and imperative upon those responsible and law-abiding citizens or entities of the country to look for immediate ways for peace restoration. Development with a human touch and \\u2018Sabka Saath, Sabka Vikas\\u2019 applies to the Zo ethnic tribes in Manipur too, he said. Regarding the fallout of the ongoing Manipur violence, he said it has resulted in internally displaced people (IDP) to the tune of 12,000 in Mizoram. \\u201cRefugees and/ or IDPs from Manipur, Myanmar and Bangladesh have risen to over 50,000. I wish and pray that the central government, on humanitarian grounds, lend us an immediate helping hand,\\u201d he said, tagging his Manipur counterpart N Biren Singh with the hashtag \\u2018All lives matter\\u2019. Manipur has been witnessing violence since May 3. It has killed more than 130 people while several houses have been burnt and massive destruction to property has been caused. Union home minister Amit Shah was in the state for five days from May 29 to June 2. He also convened a meeting in the national capital on June 24 to take stock of the situation in the state. A day later, Manipur CM Biren SIngh called on him in Delhi. Rahul Gandhi also paid a two-day visit to Manipur starting June 29. He visited relief camps in Churachandpur district on June 29. The next day, he went to Moirang in Bishnupur district. Before meeting governor Anusuiya Uikey, he also interacted with women, intellectuals and representatives of student bodies. The situation by and large in Manipur remains disturbed.\",\n          \"The Bharatiya Janata Party (BJP) has sought repoll at several booths in the Diamond Harbour Lok Sabha constituency in West Bengal's South 24 Parganas district, alleging that malpractices were carried out during the voting process on Saturday. In a letter to the West Bengal chief electoral officer on Saturday, BJP leader Shishir Bajoria said booth agents of the saffron party were driven out, CCTV cameras were found facing in directions other than the polling cubicle and voters were prevented from reaching booths. \\\"On behalf of Abhijit Das (Bobby), candidate of BJP of the Diamond Harbour Lok Sabha constituency, we request you to grant repolling in several booths\\\", the letter said. Sitting \\u00a0Trinamool Congress MP Abhishek Banerjee was seeking reelection from Diamond Harbour. Repoll was sought in booths in the Assembly segments of Budge Budge, Falta, Maheshtala, Diamond Harbour, Bishnupur, Satgachia and Metiabruz. A voter turnout of 73.79% was recorded in nine Lok Sabha seats of West Bengal that went to polls in the seventh and final phase of election on Saturday. General Elections 2024\\n\\n/\\n\\nBharatiya Janata Party\\n\\n/\\n\\nWest Bengal \",\n          \"CHENNAI: Poised for a three-cornered battle, Tamil Nadu, along with Puducherry would go to polls on April 19 in a single-phase election. The Vilavancode assembly constituency by-election is also scheduled to be held the same day. The model code of conduct came into effect along with the announcement of the election date by Chief Election Commissioner Rajiv Kumar on Saturday afternoon. Tamil Nadu has 39 Lok Sabha constituencies while Puducherry has one. Videos 02:50 PM Modi's Big Prediction For June 4 Lok Sabha Election Counting Day | Watch 1 hour ago 00:54 Kejriwal\\u2019s Battle Cry: Vote 'Jhaddu' for Free Delhi 15 hours ago 00:54 UP CM Yogi Adityanath: 'Aurangzeb's soul has entered Congress and SP ' 1 day ago 00:59 CM Kejriwal: BJP's Arrest Attempt Over Education Push Backfires! 1 day ago 03:00 'Modi's Leadership...': Psephologist Dhananjay Joshi on Variables At Play In Elections 2014, 2019 And 2024 1 day ago 03:28 2024 Elections: Can Swing Voters Impact Verdict? Are Bihar, Maharashtra Swing States? Sanjay Jha, Rahul Verma Weigh In 1 day ago 03:50 \\\"Will Modi-led NDA Repeat the 2019 Dream Run? Trends, Challenges, and Twists for Elections 2024\\\" 1 day ago 15:42 'Gaddar Sena': Uddhav Sena's Priyanka Chaturvedi On Maharashtra Vote; 'Less Than 23 Seats For BJP' 1 day ago 05:22 \\u2018Modi Ji, I\\u2019m Coming\\u2019 Arvind Kejriwal Declares \\u2018Jail Bharo\\u2019 Dare After Bibhav Kumar\\u2019s Arrest | Watch 2 days ago 00:59 Bharti Blasts BJP: Calls for End to Divisive Politics and Focus on Substance 2 days ago 1 2 3 4 5 6 With Prime Minister Narendra Modi having addressed a series of rallies in Chennai, Tirupur, Tirunelveli and Kanyakumari besides his scheduled road show in Coimbatore on March 18, BJP is racing ahead of its rivals in organising strategic campaigns for Tamil Nadu besides other southern states. Yet another public meeting has been planned in Salem on March 19, when BJP is expected to showcase its alliance strength and introduce its candidates for Tamil Nadu. The BJP-led alliance would be pitted against a powerful DMK-led formation besides a small group of constituents led by AIADMK. Bypoll will not be held for Tirukkoyilur assembly seat : Sahoo The Vilavancode assembly byelection was necessitated by resignation of Congress MLA Vijayadharani , who joined BJP. Chief electoral officer Satyabrata Sahoo clarified that the bypoll would not be held for Tirukkoyilur assembly seat represented by DMK leader K Ponmudy . Supreme Court had last week suspended Ponmudy's conviction and sentence in an assets case . Sahoo said electronic voting machines and VVPATs have been kept ready for the polls and arrangements made in the poll booths for easy access to differently abled. \\\"The number of sensitive booths will change based on the announcement of candidates,\\\" Sahoo said. The designated number of flying and static surveillance teams would take charge in each assembly constituency soon. To a query, the CEO said, \\\"Election campaigns on the basis of religion would not be permitted.\\\" Applications for inclusion of names in the electoral rolls could be submitted 10 days before the last date for nominations, and the names would be part of the electoral roll based on the verification process. Action has been taken to deliver the elector's photo identity card through the postal department to those whose names were included until Dec 9.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"news_source\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Foxnews\",\n          \"Firstpost\",\n          \"TheHindu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"India\",\n          \"US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":107}],"source":["import pandas as pd\n","df = pd.read_csv('https://raw.githubusercontent.com/kanra20/MediaBias/main/df.csv')\n","df"]},{"cell_type":"code","source":["india_df = df[df['country'] == 'India']\n","us_df= df[df['country'] == 'US']\n","india_df['news_label'] = india_df['news_source'].apply(lambda x: 'Left' if x == 'Firstpost' else 'Centre Right' if x == 'TheHindu' else 'Left' if x == 'Times of India' else None)\n","\n","us_df['news_label'] = us_df['news_source'].apply(lambda x: 'Left' if x == 'CBSnews' else 'Right' if x == 'Foxnews'  else None)\n"],"metadata":{"id":"AU4I8zw8OG7S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717392412418,"user_tz":-480,"elapsed":21,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"da0087d1-ad52-4f30-b750-6aed41c8fc5f"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n","<ipython-input-108-466b70e33a10>:3: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","<ipython-input-108-466b70e33a10>:5: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]}]},{"cell_type":"code","source":["df_concat = pd.concat([us_df, india_df], ignore_index=True)\n","df_concat"],"metadata":{"id":"YvLAUFMCOUA9","colab":{"base_uri":"https://localhost:8080/","height":493},"executionInfo":{"status":"ok","timestamp":1717392412418,"user_tz":-480,"elapsed":13,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"8955c250-d88b-4752-c19c-fe821e77c396"},"execution_count":110,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                 title  \\\n","0    Donald Trump joins TikTok after reversal on ap...   \n","1    Trump's guilty verdict: A stress test for demo...   \n","2    Views of Trump trial unchanged following verdi...   \n","3    Fact checking Trump's remarks after historic c...   \n","4    DNC files complaint alleging shady fundraising...   \n","..                                                 ...   \n","491  Predictions, predilections, and Indian general...   \n","492  Lok Sabha elections 2024: How many candidates ...   \n","493  Beyond the Lines | Indian elections: What the ...   \n","494  Busy dousing fire on Swati Maliwal 'assault' r...   \n","495  How Swati Maliwal row is disrupting Arvind Kej...   \n","\n","                                                  href  \\\n","0    https://www.cbsnews.com/news/donald-trump-join...   \n","1    https://www.cbsnews.com/news/trumps-guilty-ver...   \n","2    https://www.cbsnews.com/news/trump-verdict-new...   \n","3    https://www.cbsnews.com/news/fact-check-trump-...   \n","4    https://www.cbsnews.com/news/rfk-jr-super-pac-...   \n","..                                                 ...   \n","491  https://www.firstpost.com/opinion/predictions-...   \n","492  https://www.firstpost.com/explainers/lok-sabha...   \n","493  https://www.firstpost.com/opinion/beyond-the-l...   \n","494  https://www.firstpost.com/india/busy-dousing-f...   \n","495  https://www.firstpost.com/explainers/swati-mal...   \n","\n","                                               summary  \\\n","0    While in office, Trump took issue with the soc...   \n","1    Being found guilty of 34 felony counts would n...   \n","2    Half the country says Trump is not fit to be p...   \n","3    CBS News fact checked four misleading claims T...   \n","4    The Democratic National Committee accuses the ...   \n","..                                                 ...   \n","491  Election predictions are notoriously hard due ...   \n","492  A comprehensive analysis of the Association fo...   \n","493  Not only are the Indian general elections the ...   \n","494  Amid the escalating blame game, the focus abru...   \n","495  While Arvind Kejriwal&rsquo;s release from jai...   \n","\n","                                          article_text news_source country  \\\n","0    Washington — Former President Donald Trump has...     CBSnews      US   \n","1    Historic … unprecedented … and guilty. You cou...     CBSnews      US   \n","2    Views about former President Donald Trump's Ne...     CBSnews      US   \n","3    Former President Donald Trump's Manhattan crim...     CBSnews      US   \n","4    The Democratic National Committee this week fi...     CBSnews      US   \n","..                                                 ...         ...     ...   \n","491  Predictions are awfully difficult, even with t...   Firstpost   India   \n","492  The Lok Sabha election in India is nearing its...   Firstpost   India   \n","493  This was going to be the global election year ...   Firstpost   India   \n","494  When the Supreme Court granted interim bail to...   Firstpost   India   \n","495  Arvind Kejriwal must have felt great relief wh...   Firstpost   India   \n","\n","    news_label  \n","0         Left  \n","1         Left  \n","2         Left  \n","3         Left  \n","4         Left  \n","..         ...  \n","491       Left  \n","492       Left  \n","493       Left  \n","494       Left  \n","495       Left  \n","\n","[496 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-456865b9-2862-42a2-b1ad-e762d81656b1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>href</th>\n","      <th>summary</th>\n","      <th>article_text</th>\n","      <th>news_source</th>\n","      <th>country</th>\n","      <th>news_label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Donald Trump joins TikTok after reversal on ap...</td>\n","      <td>https://www.cbsnews.com/news/donald-trump-join...</td>\n","      <td>While in office, Trump took issue with the soc...</td>\n","      <td>Washington — Former President Donald Trump has...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Trump's guilty verdict: A stress test for demo...</td>\n","      <td>https://www.cbsnews.com/news/trumps-guilty-ver...</td>\n","      <td>Being found guilty of 34 felony counts would n...</td>\n","      <td>Historic … unprecedented … and guilty. You cou...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Views of Trump trial unchanged following verdi...</td>\n","      <td>https://www.cbsnews.com/news/trump-verdict-new...</td>\n","      <td>Half the country says Trump is not fit to be p...</td>\n","      <td>Views about former President Donald Trump's Ne...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fact checking Trump's remarks after historic c...</td>\n","      <td>https://www.cbsnews.com/news/fact-check-trump-...</td>\n","      <td>CBS News fact checked four misleading claims T...</td>\n","      <td>Former President Donald Trump's Manhattan crim...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>DNC files complaint alleging shady fundraising...</td>\n","      <td>https://www.cbsnews.com/news/rfk-jr-super-pac-...</td>\n","      <td>The Democratic National Committee accuses the ...</td>\n","      <td>The Democratic National Committee this week fi...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>Predictions, predilections, and Indian general...</td>\n","      <td>https://www.firstpost.com/opinion/predictions-...</td>\n","      <td>Election predictions are notoriously hard due ...</td>\n","      <td>Predictions are awfully difficult, even with t...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>492</th>\n","      <td>Lok Sabha elections 2024: How many candidates ...</td>\n","      <td>https://www.firstpost.com/explainers/lok-sabha...</td>\n","      <td>A comprehensive analysis of the Association fo...</td>\n","      <td>The Lok Sabha election in India is nearing its...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>493</th>\n","      <td>Beyond the Lines | Indian elections: What the ...</td>\n","      <td>https://www.firstpost.com/opinion/beyond-the-l...</td>\n","      <td>Not only are the Indian general elections the ...</td>\n","      <td>This was going to be the global election year ...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>494</th>\n","      <td>Busy dousing fire on Swati Maliwal 'assault' r...</td>\n","      <td>https://www.firstpost.com/india/busy-dousing-f...</td>\n","      <td>Amid the escalating blame game, the focus abru...</td>\n","      <td>When the Supreme Court granted interim bail to...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","      <td>Left</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>How Swati Maliwal row is disrupting Arvind Kej...</td>\n","      <td>https://www.firstpost.com/explainers/swati-mal...</td>\n","      <td>While Arvind Kejriwal&amp;rsquo;s release from jai...</td>\n","      <td>Arvind Kejriwal must have felt great relief wh...</td>\n","      <td>Firstpost</td>\n","      <td>India</td>\n","      <td>Left</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>496 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-456865b9-2862-42a2-b1ad-e762d81656b1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-456865b9-2862-42a2-b1ad-e762d81656b1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-456865b9-2862-42a2-b1ad-e762d81656b1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ba94b00d-5598-4f47-9771-a383db964060\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba94b00d-5598-4f47-9771-a383db964060')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ba94b00d-5598-4f47-9771-a383db964060 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_244aa15c-ace9-4c5b-849f-6005e10a8f5c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_concat')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_244aa15c-ace9-4c5b-849f-6005e10a8f5c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_concat');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_concat","summary":"{\n  \"name\": \"df_concat\",\n  \"rows\": 496,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 354,\n        \"samples\": [\n          \"Chhattisgarh's Raipur Lok Sabha Election 2024: Date of voting, result, candidates, main parties, schedule\",\n          \"The FDA is weighing approval of MDMA for PTSD. Here's what patients could see.\",\n          \"Congress delegation meets ECI demanding re-poll in Tripura West\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"href\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 367,\n        \"samples\": [\n          \"https://timesofindia.indiatimes.com/elections/lok-sabha-elections/tamil-nadu/news/tamil-nadu-lok-sabha-exit-poll-results-dmk-expected-to-bag-26-seats-bjp-nda-may-open-account/articleshow/110622750.cms\",\n          \"https://www.cbsnews.com/news/rupert-murdoch-marries-5th-time-elena-zhukova/\",\n          \"https://www.cbsnews.com/news/nato-allies-brace-possible-trump-president/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 250,\n        \"samples\": [\n          \"Former Calcutta High Court judge Abhijit Ganguly barred by Election Commission for offensive remarks against Mamata Banerjee in West Bengal. BJP candidate censured for violating Model Code of Conduct in Tamluk campaign, prompting action from EC and criticism from opponent Trinamool. Trinamool youth leader Debangshu Bhattacharya condemns Ganguly's comments and calls out BJP's behavior.\",\n          \"President Biden said the \\\"American principle that no one is above the law was reaffirmed\\\" after Trump was convicted on 34 felony counts of falsifying business records.\",\n          \"Pens, water bottles, spy cameras, button cameras, mobile phones and other electronic gadgets will not be allowed into the counting venue, says SP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"article_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 348,\n        \"samples\": [\n          \"NEW DELHI: As Manipur burns due to ethnic violence for more than two months, another northeastern state of Mizoram came into focus on Tuesday. While top Congress leaders held a meeting on Mizoram with state party leaders, chief minister issued a fervent appeal for restoration of peace and normalcy in Manipur. Mizoram will go to election later this year along with four other states - Madhya Pradesh, Rajasthan, Telangana and Chhattisgarh. In a meeting on Mizoram held in the national capital, president Mallikarjun Kharge , former president Shri Rahul Gandhi , general secretary (organisation) KC Venugopal, Mizoram in-charge Bhakta Charan Dass and leaders from that state participated at All India Congress Committee (AICC) headquarters. Later, Kharge, in a tweet, said, \\u201cOur fellow citizens of Mizoram desire change. Congress party has a record of providing stability and progress in the state, and @INCMizoram is once again ready to herald a new era of development and welfare in Mizoram. We will do everything possible to work towards that.\\u201d Venugopal, in a tweet, said, \\\"Attended the strategy meeting for the upcoming Mizoram assembly elections at AICC HQ, headed by AICC president Mallikarjun Kharge along with Rahul Gandhi. The BJP and NEDA (Northeast Development Agency) have completely ruined the Northeast . The Congress is the only party that can serve the true interests of Mizoram as well as all other northeastern states.\\\" Coincidentally, perhaps, Mizoram CM Zoramthanga posted a long tweet raising concern over the continued violence in the neighbouring state of Manipur and seeking help from the Centre for the refugees from that state as well as bordering Myanmar and Bangladesh. Zoramthanga started by saying that the onset of May witnessed a brutal, untoward and uncalled-for incident in Manipur. \\u201cAt this very moment, 3:30 am, July 4, 2023; nothing seems to have changed. We are counting, and today is the 62nd day.\\u201d The Mizoram CM said, \\u201cWhile we hope with much goodwill, anticipation and hope, things would turn for the better, situations seem to have worsened. When will it stop? I condole my Manipuri Zo ethnic brethen, my incessant prayers for those who have lost their loved ones, their homes and families wrecked in shatters. May the gracious Lord give you the strength and the wisdom to navigate through this disastrous incident.\\u201d Zoramthanga said he did not wish to see anymore pictures and video clips of churches being burnt, brutal killings and violence of all nature, regardless of gender and age. \\u201cIf there is only one way of settling for peace, shall we opt for that? Many lives have been lost, bloodshed all over, physical torture and the victims are looking for refuge wherever possible. With no iota of doubt, those victims are my kin and kin, my own blood and should we quieten the situation by just being silent? I don't think so!\\u201d He said he would like to call for immediate restoration of peace and normalcy. It is incumbent and imperative upon those responsible and law-abiding citizens or entities of the country to look for immediate ways for peace restoration. Development with a human touch and \\u2018Sabka Saath, Sabka Vikas\\u2019 applies to the Zo ethnic tribes in Manipur too, he said. Regarding the fallout of the ongoing Manipur violence, he said it has resulted in internally displaced people (IDP) to the tune of 12,000 in Mizoram. \\u201cRefugees and/ or IDPs from Manipur, Myanmar and Bangladesh have risen to over 50,000. I wish and pray that the central government, on humanitarian grounds, lend us an immediate helping hand,\\u201d he said, tagging his Manipur counterpart N Biren Singh with the hashtag \\u2018All lives matter\\u2019. Manipur has been witnessing violence since May 3. It has killed more than 130 people while several houses have been burnt and massive destruction to property has been caused. Union home minister Amit Shah was in the state for five days from May 29 to June 2. He also convened a meeting in the national capital on June 24 to take stock of the situation in the state. A day later, Manipur CM Biren SIngh called on him in Delhi. Rahul Gandhi also paid a two-day visit to Manipur starting June 29. He visited relief camps in Churachandpur district on June 29. The next day, he went to Moirang in Bishnupur district. Before meeting governor Anusuiya Uikey, he also interacted with women, intellectuals and representatives of student bodies. The situation by and large in Manipur remains disturbed.\",\n          \"The Bharatiya Janata Party (BJP) has sought repoll at several booths in the Diamond Harbour Lok Sabha constituency in West Bengal's South 24 Parganas district, alleging that malpractices were carried out during the voting process on Saturday. In a letter to the West Bengal chief electoral officer on Saturday, BJP leader Shishir Bajoria said booth agents of the saffron party were driven out, CCTV cameras were found facing in directions other than the polling cubicle and voters were prevented from reaching booths. \\\"On behalf of Abhijit Das (Bobby), candidate of BJP of the Diamond Harbour Lok Sabha constituency, we request you to grant repolling in several booths\\\", the letter said. Sitting \\u00a0Trinamool Congress MP Abhishek Banerjee was seeking reelection from Diamond Harbour. Repoll was sought in booths in the Assembly segments of Budge Budge, Falta, Maheshtala, Diamond Harbour, Bishnupur, Satgachia and Metiabruz. A voter turnout of 73.79% was recorded in nine Lok Sabha seats of West Bengal that went to polls in the seventh and final phase of election on Saturday. General Elections 2024\\n\\n/\\n\\nBharatiya Janata Party\\n\\n/\\n\\nWest Bengal \",\n          \"CHENNAI: Poised for a three-cornered battle, Tamil Nadu, along with Puducherry would go to polls on April 19 in a single-phase election. The Vilavancode assembly constituency by-election is also scheduled to be held the same day. The model code of conduct came into effect along with the announcement of the election date by Chief Election Commissioner Rajiv Kumar on Saturday afternoon. Tamil Nadu has 39 Lok Sabha constituencies while Puducherry has one. Videos 02:50 PM Modi's Big Prediction For June 4 Lok Sabha Election Counting Day | Watch 1 hour ago 00:54 Kejriwal\\u2019s Battle Cry: Vote 'Jhaddu' for Free Delhi 15 hours ago 00:54 UP CM Yogi Adityanath: 'Aurangzeb's soul has entered Congress and SP ' 1 day ago 00:59 CM Kejriwal: BJP's Arrest Attempt Over Education Push Backfires! 1 day ago 03:00 'Modi's Leadership...': Psephologist Dhananjay Joshi on Variables At Play In Elections 2014, 2019 And 2024 1 day ago 03:28 2024 Elections: Can Swing Voters Impact Verdict? Are Bihar, Maharashtra Swing States? Sanjay Jha, Rahul Verma Weigh In 1 day ago 03:50 \\\"Will Modi-led NDA Repeat the 2019 Dream Run? Trends, Challenges, and Twists for Elections 2024\\\" 1 day ago 15:42 'Gaddar Sena': Uddhav Sena's Priyanka Chaturvedi On Maharashtra Vote; 'Less Than 23 Seats For BJP' 1 day ago 05:22 \\u2018Modi Ji, I\\u2019m Coming\\u2019 Arvind Kejriwal Declares \\u2018Jail Bharo\\u2019 Dare After Bibhav Kumar\\u2019s Arrest | Watch 2 days ago 00:59 Bharti Blasts BJP: Calls for End to Divisive Politics and Focus on Substance 2 days ago 1 2 3 4 5 6 With Prime Minister Narendra Modi having addressed a series of rallies in Chennai, Tirupur, Tirunelveli and Kanyakumari besides his scheduled road show in Coimbatore on March 18, BJP is racing ahead of its rivals in organising strategic campaigns for Tamil Nadu besides other southern states. Yet another public meeting has been planned in Salem on March 19, when BJP is expected to showcase its alliance strength and introduce its candidates for Tamil Nadu. The BJP-led alliance would be pitted against a powerful DMK-led formation besides a small group of constituents led by AIADMK. Bypoll will not be held for Tirukkoyilur assembly seat : Sahoo The Vilavancode assembly byelection was necessitated by resignation of Congress MLA Vijayadharani , who joined BJP. Chief electoral officer Satyabrata Sahoo clarified that the bypoll would not be held for Tirukkoyilur assembly seat represented by DMK leader K Ponmudy . Supreme Court had last week suspended Ponmudy's conviction and sentence in an assets case . Sahoo said electronic voting machines and VVPATs have been kept ready for the polls and arrangements made in the poll booths for easy access to differently abled. \\\"The number of sensitive booths will change based on the announcement of candidates,\\\" Sahoo said. The designated number of flying and static surveillance teams would take charge in each assembly constituency soon. To a query, the CEO said, \\\"Election campaigns on the basis of religion would not be permitted.\\\" Applications for inclusion of names in the electoral rolls could be submitted 10 days before the last date for nominations, and the names would be part of the electoral roll based on the verification process. Action has been taken to deliver the elector's photo identity card through the postal department to those whose names were included until Dec 9.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"news_source\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Foxnews\",\n          \"Firstpost\",\n          \"TheHindu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"India\",\n          \"US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"news_label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["df_concat['news_label'].unique()"],"metadata":{"id":"g6fZECgAOfvS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717392412418,"user_tz":-480,"elapsed":17,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"17f1866e-6359-434b-f49b-e4df4f1ef7d3"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["array(['Left', 'Right', 'Centre Right'], dtype=object)"]},"metadata":{},"execution_count":109}]},{"cell_type":"markdown","source":["##Preprocessing"],"metadata":{"id":"vRBswArRm7fj"}},{"cell_type":"code","source":["# Initialize lemmatizer and stopwords\n","lmtzr = nltk.WordNetLemmatizer()\n","stop_words = set(stopwords.words(\"english\"))\n","# Load the English tokenizer and language model\n","nlp = en_core_web_sm.load()\n","\n","# Initialize spaCy tokenizer\n","tokenizer = Tokenizer(nlp.vocab)\n","# load WordNet POS tags for lemmatization\n","def wordnet_pos_tags(treebank_tag):\n","    if treebank_tag.startswith('J'):\n","        return wordnet.ADJ\n","    elif treebank_tag.startswith('V'):\n","        return wordnet.VERB\n","    elif treebank_tag.startswith('N'):\n","        return wordnet.NOUN\n","    elif treebank_tag.startswith('R'):\n","        return wordnet.ADV\n","    else:\n","        return wordnet.NOUN\n","\n","# Define a function for preprocessing text using spaCy\n","def spacy_preprocess(text):\n","    # Process the text with spaCy\n","    doc = nlp(text)\n","    # Extract tokens\n","    tokens = [token.text for token in doc if not token.is_stop]\n","    return tokens\n","\n","# Function to preprocess text with enhanced tokenization\n","def enhanced_txt_preprocess_pipeline(text):\n","    if isinstance(text, str):  # Check if the input text is a string\n","        # Standardize text to lowercase\n","        standard_txt = text.lower()\n","        # Remove multiple white spaces and line breaks\n","        clean_txt = re.sub(r'\\n', ' ', standard_txt)\n","        clean_txt = re.sub(r'\\s+', ' ', clean_txt)\n","        clean_txt = clean_txt.strip()\n","        # Handle contractions\n","        clean_txt = re.sub(r\"n't\", \" not\", clean_txt)\n","        clean_txt = re.sub(r\"'s\", \" is\", clean_txt)\n","        clean_txt = re.sub(r\"'m\", \" am\", clean_txt)\n","        # Tokenize text using spaCy\n","        tokens = spacy_preprocess(clean_txt)\n","        # Remove non-alphabetic tokens\n","        filtered_tokens_alpha = [word for word in tokens if word.isalpha()]\n","        # Load NLTK stopword list and add original stopwords\n","        stop_words = stopwords.words('english')\n","        stop_words.extend(['thee', 'thou', 'thy', 'ye', 'computer', 'gutenberg', 'http', 'chapter', 'mr', 'mrs', 'ms', 'dr'])\n","        # Remove stopwords\n","        filtered_tokens_final = [w for w in filtered_tokens_alpha if not w in stop_words]\n","        # Define lemmatizer\n","        lemmatizer = WordNetLemmatizer()\n","        # Conduct POS tagging\n","        pos_tags = nltk.pos_tag(filtered_tokens_final)\n","        # Lemmatize word-tokens via assigned POS tags\n","        lemma_tokens = [lemmatizer.lemmatize(token, wordnet_pos_tags(pos_tag)) for token, pos_tag in pos_tags]\n","        return lemma_tokens\n","    else:\n","        return []  # Return an empty list if the input is not a string\n","\n","# Apply the enhanced preprocessing function to each article in the dataframe\n","df_concat['processed_text'] = df_concat['article_text'].apply(enhanced_txt_preprocess_pipeline)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E6cF31fvFz6u","executionInfo":{"status":"ok","timestamp":1717392551065,"user_tz":-480,"elapsed":135210,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"863edb59-045d-4611-86e4-8237967d8b92"},"execution_count":111,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"markdown","source":["##Sentiment Score"],"metadata":{"id":"uEB47L_dvAim"}},{"cell_type":"code","source":["def calculate_sentiment(text):\n","    blob = TextBlob(text)\n","    sentiment_score = blob.sentiment.polarity\n","    return sentiment_score\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7YGyo3oIuFcx","executionInfo":{"status":"ok","timestamp":1717392551067,"user_tz":-480,"elapsed":21,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"df60bdc0-8947-46ea-c2d8-d2726380716f"},"execution_count":112,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["df_concat['processed_text']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"has7mvfuHJwV","executionInfo":{"status":"ok","timestamp":1717392551067,"user_tz":-480,"elapsed":17,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"2a81c0f7-3afb-47d8-f47b-5364594cc743"},"execution_count":113,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["0      [washington, president, donald, trump, join, t...\n","1      [historic, unprecedented, guilty, escape, word...\n","2      [view, president, donald, trump, new, york, cr...\n","3      [president, donald, trump, manhattan, criminal...\n","4      [democratic, national, committee, week, file, ...\n","                             ...                        \n","491    [prediction, awfully, difficult, reassure, cru...\n","492    [lok, sabha, election, india, near, conclusion...\n","493    [go, global, election, year, decide, fate, wor...\n","494    [supreme, court, grant, interim, bail, delhi, ...\n","495    [arvind, kejriwal, felt, great, relief, grant,...\n","Name: processed_text, Length: 496, dtype: object"]},"metadata":{},"execution_count":113}]},{"cell_type":"markdown","source":["##Topic Modeling"],"metadata":{"id":"LLF0iZQcHif9"}},{"cell_type":"code","source":["india_df = df_concat[df_concat['country'] == 'India']\n","us_df = df_concat[df_concat['country'] == 'US']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q3LVPyKrHyO1","executionInfo":{"status":"ok","timestamp":1717392551067,"user_tz":-480,"elapsed":12,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"4fc0f7a0-080d-4cac-88fa-2487081d7289"},"execution_count":114,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.decomposition import LatentDirichletAllocation\n","# Function to get topic names\n","def get_topic_names(model, feature_names, no_top_words):\n","    topic_names = []\n","    for topic_idx, topic in enumerate(model.components_):\n","        topic_name = \" \".join([feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]])\n","        topic_names.append(topic_name)\n","    return topic_names\n","\n","# Function to perform topic modeling and get distributions\n","def perform_topic_modeling(df, n_topics=10, no_top_words=5):\n","    vectorizer = CountVectorizer(stop_words='english', max_features=1000)\n","    dtm = vectorizer.fit_transform(df['processed_text'].apply(lambda x: ' '.join(x)))\n","    lda = LatentDirichletAllocation(n_components=n_topics, random_state=42)\n","    lda.fit(dtm)\n","\n","    feature_names = vectorizer.get_feature_names_out()\n","    topic_names = get_topic_names(lda, feature_names, no_top_words)\n","\n","    df['topic_distribution'] = list(lda.transform(dtm))\n","    topic_dist = df.groupby('news_source')['topic_distribution'].apply(np.mean)\n","    topic_df = pd.DataFrame(topic_dist.tolist(), index=topic_dist.index, columns=topic_names)\n","\n","    return topic_df, topic_names\n","\n","# Plotting function\n","def plot_topic_distribution(topic_df, country_name):\n","    topic_df.plot(kind='bar', stacked=True, figsize=(10, 7), colormap='tab20')\n","    plt.title(f'Topic Distribution by News Source in {country_name}')\n","    plt.xlabel('News Source')\n","    plt.ylabel('Proportion')\n","    plt.legend(loc='upper right', bbox_to_anchor=(1.2, 1))\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v1EhEU9_HgHF","executionInfo":{"status":"ok","timestamp":1717392551067,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"aa1da1a9-3e9b-47cb-ca12-2e2fbb995bca"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["# Perform topic modeling separately for India and US\n","india_topic_df, india_topic_names = perform_topic_modeling(india_df, n_topics=10, no_top_words=5)\n","# Plot the topic distributions\n","plot_topic_distribution(india_topic_df, 'India')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":933},"id":"8q072aVDIGId","executionInfo":{"status":"ok","timestamp":1717392554280,"user_tz":-480,"elapsed":3220,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"29e7c45d-5444-4309-81f0-84b55eba7cb7"},"execution_count":116,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n","<ipython-input-115-136acc8f02ea>:21: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Display the topic names\n","print(\"India Topics:\")\n","for idx, topic in enumerate(india_topic_names):\n","    print(f\"Topic {idx+1}: {topic}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-IqIViewIIIE","executionInfo":{"status":"ok","timestamp":1717392554913,"user_tz":-480,"elapsed":644,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"0c565e84-27c9-4eda-d978-3193c2eff1b4"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["India Topics:\n","Topic 1: poll exit election count conduct\n","Topic 2: poll election lok sabha vote\n","Topic 3: aap delhi minister bjp maliwal\n","Topic 4: kejriwal kumar maliwal say aap\n","Topic 5: prediction parameter election predict monsoon\n","Topic 6: election india voter democracy vote\n","Topic 7: bjp ago day say party\n","Topic 8: ago poll hour bjp day\n","Topic 9: candidate case criminal phase charge\n","Topic 10: seat poll nda bjp predict\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["us_topic_df, us_topic_names = perform_topic_modeling(us_df, n_topics=10, no_top_words=5)\n","plot_topic_distribution(us_topic_df, 'US')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":899},"id":"W3q54bBeIKDd","executionInfo":{"status":"ok","timestamp":1717392556238,"user_tz":-480,"elapsed":1334,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"81c53a4b-63cb-4e5f-b157-a2cb4111f978"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n","<ipython-input-115-136acc8f02ea>:21: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(\"\\nUS Topics:\")\n","for idx, topic in enumerate(us_topic_names):\n","    print(f\"Topic {idx+1}: {topic}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4TYK0H5AINPd","executionInfo":{"status":"ok","timestamp":1717392556239,"user_tz":-480,"elapsed":21,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"6dee3200-2d9b-4625-c9ed-6bd5c6621fad"},"execution_count":119,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","US Topics:\n","Topic 1: tim becky bliefnick say schnack\n","Topic 2: say drug like people michael\n","Topic 3: alcala think rodney president year\n","Topic 4: say vaccine police officer nesbitt\n","Topic 5: margaret brennan trump think burgum\n","Topic 6: trump say campaign president biden\n","Topic 7: launch flight space moon starliner\n","Topic 8: trump say president trial verdict\n","Topic 9: korea news north south murdoch\n","Topic 10: gonzales vote republican say herrera\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"markdown","source":["##Sentiment Scores"],"metadata":{"id":"EoHHwsXFHyEl"}},{"cell_type":"code","source":["pip install chart_studio\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oWbxbCpQISpV","executionInfo":{"status":"ok","timestamp":1717392563842,"user_tz":-480,"elapsed":7620,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"7eca44c8-c4e9-4947-cf61-ee47ad089ee7"},"execution_count":120,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: chart_studio in /usr/local/lib/python3.10/dist-packages (1.1.0)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from chart_studio) (5.15.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from chart_studio) (2.31.0)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.10/dist-packages (from chart_studio) (1.3.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from chart_studio) (1.16.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->chart_studio) (8.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly->chart_studio) (24.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->chart_studio) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->chart_studio) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->chart_studio) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->chart_studio) (2024.2.2)\n"]}]},{"cell_type":"code","source":["df_concat.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sG6B_bZNIlA0","executionInfo":{"status":"ok","timestamp":1717392563842,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"437cc272-f73f-482f-e681-8ec7a46a146f"},"execution_count":121,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['title', 'href', 'summary', 'article_text', 'news_source', 'country',\n","       'news_label', 'processed_text'],\n","      dtype='object')"]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["from textblob import TextBlob\n","\n","# Define a function to convert a list of tokens into a single string\n","def tokens_to_string(tokens):\n","    return ' '.join(tokens)\n","\n","# Convert the list of tokens to string\n","df_concat['processed_text_str'] = df_concat['processed_text'].apply(tokens_to_string)\n","\n","# Define a function to calculate sentiment score\n","def calculate_sentiment_score(text):\n","    blob = TextBlob(text)\n","    return blob.sentiment.polarity\n","\n","# Apply the function to each row in the DataFrame and store the result in a new column\n","df_concat['article_sentiment_score'] = df_concat['processed_text_str'].apply(calculate_sentiment_score)\n","\n","# Drop the intermediate column\n","df_concat.drop(columns=['processed_text_str'], inplace=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TCAP5fG6vaHF","executionInfo":{"status":"ok","timestamp":1717392564979,"user_tz":-480,"elapsed":1144,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"c296b5aa-64bc-4973-cefc-c92fee5f150b"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["import plotly.express as px\n","import pandas as pd\n","\n","# Assuming df is your DataFrame with the required data\n","# Convert the DataFrame to long format for Plotly\n","df_long = pd.melt(df_concat, id_vars=['country', 'news_source'], value_vars=['article_sentiment_score'], var_name='Sentiment', value_name='Score')\n","\n","# Create an interactive box plot using Plotly Express\n","fig = px.box(df_long, x='country', y='Score', color='news_source', title='Sentiment Scores by News Source and Country',\n","             labels={'Score': 'Sentiment Score', 'country': 'Country', 'news_source': 'News Source'},\n","             category_orders={'country': sorted(df_long['country'].unique())},\n","             width=1200, height=800)\n","\n","# Customize the appearance of the plot\n","fig.update_layout(title_x=0.5, xaxis_tickangle=-45, legend_title='News Source')\n","\n","# Show the interactive plot\n","fig.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":886},"id":"eBA8QjvsIUZd","executionInfo":{"status":"ok","timestamp":1717392564980,"user_tz":-480,"elapsed":15,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"7088b7d2-271c-4791-964c-80e3ff88fbda"},"execution_count":123,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"d459882e-2bf9-40ac-835d-79fd350a6e06\" class=\"plotly-graph-div\" style=\"height:800px; width:1200px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d459882e-2bf9-40ac-835d-79fd350a6e06\")) {                    Plotly.newPlot(                        \"d459882e-2bf9-40ac-835d-79fd350a6e06\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=CBSnews\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eSentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"CBSnews\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"CBSnews\",\"notched\":false,\"offsetgroup\":\"CBSnews\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[-0.010645933014354073,-0.016133056758056763,-0.08014842300556586,0.025810429880197317,0.052793040293040286,0.016224747474747486,-0.10097402597402598,0.08480278980278978,0.010830527497194164,0.08727489177489176,0.0258529169243455,0.0008640318015317983,0.06282045190581778,0.18665223665223665,0.013081979348213122,0.02602495543672014,-0.1006728778467909,0.02545454545454546,0.137025938542332,-0.08215508257174925,0.11931216931216931,-0.008648989898989897,0.019104084321475617,0.03087121212121213,0.10207512662193917,0.10614518197851533,-0.010645933014354073,0.0018099716375578401,0.16596929613596284,0.07379083038173945,-0.012512939958592133,0.08607420357420358,-0.016133056758056763,0.12487755102040818,0.05876623376623376,0.11613636363636363,0.10207512662193917,0.03719008264462809,0.11613636363636363,-0.06880165289256199,0.15320964749536178,-0.012259900593233926,-0.10604118104118104,0.10207512662193917,0.10614518197851533,-0.010645933014354073,0.0018099716375578401,0.16596929613596284,0.06687500000000002,0.14112554112554113,0.027420079920079925,0.009779785431959337,0.09179545454545456,0.23561242678889732,-0.015372678169288336,0.061853832442067734,-0.021876837154614928,-0.028735632183908046,0.23561242678889732,0.19213117570260432,-0.10604118104118104,0.0478163503163503,0.0512292738707833,0.014259949820294635,0.05876623376623376,0.012557603686635941,0.03308534703001916,0.03580331035923144,-0.028735632183908046,-0.07947530864197533],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Foxnews\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eSentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Foxnews\",\"marker\":{\"color\":\"#EF553B\"},\"name\":\"Foxnews\",\"notched\":false,\"offsetgroup\":\"Foxnews\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.008076298701298695,0.07781385281385282,-0.039155242905242915,0.10969146973245333,0.2714285714285714,0.039031339031339034,0.10028409090909089,0.08410576351752821,0.21812110653574068,-0.009821428571428566],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=TheHindu\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eSentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"TheHindu\",\"marker\":{\"color\":\"#00cc96\"},\"name\":\"TheHindu\",\"notched\":false,\"offsetgroup\":\"TheHindu\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.255,0.18327572964669744,-0.025,0.03002873563218391,0.10169319927384445,0.4454545454545455,-0.02483766233766234,-0.053896103896103886,-0.375,-0.00031249999999998813,-0.12272727272727273,-0.0275625,0.09276190476190477,0.15366459627329193,0.06403030303030303,0.0012698412698412662,0.1415430402930403,0.05514119601328904,0.0642714285714286,0.05777116402116404,0.09815671808629554,0.07518287486791426,0.42500000000000004,0.16212121212121214,0.05000000000000002,0.04000000000000001,0.15015948963317385,0.03002873563218391,0.02208791208791209,0.26391879625750597,0.04968527640941433,-0.053896103896103886,-0.375,-0.00031249999999998813,-0.12272727272727273,0.16590698945067883,0.24682539682539684,0.13416666666666668,0.03371794871794871,-0.00031249999999998813,0.5625,0.15015948963317385,0.18000000000000002,0.14345238095238097,0.15960353535353536,0.11086971539099195,0.0834090909090909,0.25,0.20664983164983164,0.13244047619047616,0.11117295403009689,0.2858125901875904,0.05911976911976913,0.16590698945067883,0.11309523809523812,0.24682539682539684,0.02500000000000001,0.10649305555555555,0.04968527640941433,-0.016666666666666663,0.4142857142857143,-0.10909090909090907,0.025000000000000015,0.5625,0.30494505494505497,0.04839466089466091,-0.0275625,0.16133333333333333,0.0834090909090909,0.05852272727272726],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Times of India\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eSentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Times of India\",\"marker\":{\"color\":\"#ab63fa\"},\"name\":\"Times of India\",\"notched\":false,\"offsetgroup\":\"Times of India\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.25633608815427,0.035984848484848474,0.11948621553884708,0.11893939393939396,0.07083333333333333,-0.18916666666666665,0.07651515151515152,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13333333333333333,0.1531857142857143,0.09769151138716357,0.13446236559139785,0.16884848484848475,0.30782106782106783,0.12780265711300193,0.13579545454545455,0.24967032967032965,0.097979797979798,0.22613636363636364,0.18579545454545454,0.2686363636363636,0.18579545454545454,0.20889724310776944,0.12906162464985993,0.23098845598845605,0.13076923076923075,0.07563492063492065,-0.03303571428571429,0.18125000000000002,0.20899470899470898,0.16553571428571429,0.13035714285714287,0.3003401360544217,0.10054945054945057,-0.18916666666666665,0.07651515151515152,0.13712121212121212,-0.018654916512059364,0.15505226480836237,0.16875,-0.016666666666666666,0.08783673469387761,0.0643877551020408,0.09529220779220778,0.057749999999999996,0.1139220779220779,-0.0001785714285714327,0.010399999999999996,0.09594696969696968,0.0853968253968254,0.18551515151515152,0.3060606060606061,-0.07013888888888888,0.13138528138528136,0.13138528138528136,0.13138528138528136,0.13138528138528136,0.13138528138528136,0.13138528138528136,0.13138528138528136,0.0478510101010101,0.007825706039991755,0.1057017543859649,-0.043939393939393945,0.02912087912087912,0.0979229797979798,0.09818253968253969,0.16339285714285715,0.1122549019607843,0.08727899293688768,0.049999999999999996,0.0028086992372706493,1.2335811384723961e-17,0.015396397387922808,0.12152173913043476,0.2,0.2833333333333334,0.11857142857142858,0.039999999999999994,0.051445578231292526,0.25633608815427,0.04166666666666667,0.10367845117845119,0.11893939393939396,0.0595959595959596,0.01515151515151515,0.20164141414141415,0.1233100233100233,0.11788720538720539,-0.08124999999999999,0.05833333333333333,0.05714285714285715,0.12412280701754386,0.23584656084656086,-0.15885416666666669,0.15645502645502649,0.16887175324675324,0.12879464285714287,-0.07466039707419017,-0.043518518518518526,0.2525753567420234,0.07222222222222222,0.11341125541125538,0.1345000527927357,0.12113082039911308,0.24573002754820938,0.11250000000000002,0.07500000000000001,0.2545454545454545,0.016045548654244318,0.033566433566433566,0.08788515406162466,0.11001043599257884,0.1430533910533911,0.17327731092436974,0.2194805194805195,0.11258472479901051,-0.07435897435897437,-0.09404761904761903,0.14936079545454545,0.19302507836990593,0.13740530303030304,0.2025974025974026,0.018985119047619035,0.22659740259740263,-0.19271464646464645,0.1408673469387755,0.10158730158730159,0.2372123490544543,0.04666666666666667,0.03958333333333334,0.17500000000000002,0.10228070175438597,0.015607606679035244,0.15,0.012202380952380952,0.21984126984126987,0.4371428571428571,0.1578512396694215,0.12092532467532466,0.19909090909090912,0.06818181818181819,0.1239047619047619,0.03428571428571428,0.22285714285714284,-0.057435064935064936,0.019868637110016418,0.03815476190476189,0.21546072974644404,-0.0329861111111111,0.04087797619047619,-0.03645833333333333,0.05,0.035984848484848474,0.11948621553884708,0.20678524374176543,0.19488636363636366,0.18249072356215215,0.4166666666666667,0.0896991341991342,0.33594444444444443,0.21597222222222226,0.12843137254901962,0.029629629629629634,0.1678961038961039,0.22727272727272724,0.026041666666666657,0.0263970348647768,0.13741258741258744,0.021938775510204084,0.17432900432900436,0.1385714285714286,0.050729746444032144,-0.030573593073593072,0.0033333333333333366,0.09704184704184704,0.009147727272727276,0.08181818181818182,-0.05636363636363637,0.21654025974025973,0.1446408279220779,0.1473876123876124,0.12365720699054032,0.14275875639512006,0.17370129870129872,0.08479674796747967,0.03560894660894661,0.11608751608751608,0.06571428571428571,0.17067591499409682,0.16793650793650797,-0.04833333333333333,0.06253119429590019,0.037468671679197985,0.21668604651162787,0.14907407407407403,0.25633608815427,0.04166666666666667,0.05,0.035984848484848474,0.11948621553884708,0.14951790633608814,-0.18916666666666665,0.05197988286223578,-0.023686868686868687,0.22285714285714284,0.014988776655443316,0.03630952380952381,0.03498217468805703,0.1632734912146677,0.05069444444444445,0.11613802863802862,0.2729034854034854,0.25566378066378065,0.20208333333333334,0.17023809523809524,0.14292929292929293,0.225,0.2,0.0825706039991754,0.13333333333333333,0.08106060606060606,0.1531857142857143,0.20678524374176543,0.09769151138716357],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Firstpost\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eSentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Firstpost\",\"marker\":{\"color\":\"#FFA15A\"},\"name\":\"Firstpost\",\"notched\":false,\"offsetgroup\":\"Firstpost\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.16904761904761903,0.18144078144078143,0.2864285714285714,0.16904761904761903,0.18144078144078143,0.2864285714285714,0.16904761904761903,0.18144078144078143,0.2864285714285714,0.16904761904761903,0.18144078144078143,0.2864285714285714,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764,0.3386904761904762,0.2822751322751323,0.07988774791100371,0.06251190476190475,0.15129870129870127,0.11658828890407838,-0.3010256410256411,0.07128241174632924,0.10361111111111113,-0.011481800512412764],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Country\"},\"categoryorder\":\"array\",\"categoryarray\":[\"India\",\"US\"],\"tickangle\":-45},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sentiment Score\"}},\"legend\":{\"title\":{\"text\":\"News Source\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Sentiment Scores by News Source and Country\",\"x\":0.5},\"boxmode\":\"group\",\"height\":800,\"width\":1200},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('d459882e-2bf9-40ac-835d-79fd350a6e06');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["###VADER"],"metadata":{"id":"hBkG6XZwEkGN"}},{"cell_type":"code","source":["!pip install vaderSentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eh6WIbDBI_37","executionInfo":{"status":"ok","timestamp":1717392576798,"user_tz":-480,"elapsed":11829,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"e452479b-e54b-41b4-b085-4c8fb68c1a15"},"execution_count":124,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: vaderSentiment in /usr/local/lib/python3.10/dist-packages (3.3.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from vaderSentiment) (2.31.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (2024.2.2)\n"]}]},{"cell_type":"code","source":["# Importing necessary libraries\n","from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# Initialize the VADER sentiment analyzer\n","analyzer = SentimentIntensityAnalyzer()\n","\n","# Function to calculate sentiment score using VADER\n","def calculate_vader_sentiment(text):\n","    if isinstance(text, float):  # Check if the value is a float\n","        return 0  # Return a neutral sentiment score\n","    sentiment_score = analyzer.polarity_scores(text)\n","    return sentiment_score['compound']  # Using compound score as an overall sentiment score\n","\n","# Convert float values to strings in the 'article_text' column\n","df_concat['article_text'] = df_concat['article_text'].astype(str)\n","\n","# Add a new column for VADER sentiment scores to the DataFrame\n","df_concat['vader_sentiment_score'] = df_concat['article_text'].apply(calculate_vader_sentiment)\n","\n","# Group by news source and country, and calculate mean VADER sentiment score\n","grouped_df_vader = df_concat.groupby(['news_source', 'country'])['vader_sentiment_score'].mean().reset_index()\n","\n","# Plotting\n","fig, ax = plt.subplots(figsize=(10, 6))\n","for country, group in grouped_df_vader.groupby('country'):\n","    ax.bar(group['news_source'], group['vader_sentiment_score'], label=country)\n","\n","ax.set_xlabel('News Source')\n","ax.set_ylabel('Mean VADER Sentiment Score')\n","ax.set_title('VADER Sentiment Scores of News Sources by Country')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"siXJNSNJI6kE","executionInfo":{"status":"ok","timestamp":1717392630471,"user_tz":-480,"elapsed":53683,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"6b90f2e5-a95c-4d23-b4b3-a66801c60323"},"execution_count":125,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import plotly.express as px\n","import pandas as pd\n","\n","# Assuming df_concat is your DataFrame with the required data\n","# Convert the DataFrame to long format for Plotly\n","df_long_vader = pd.melt(df_concat, id_vars=['country', 'news_source'], value_vars=['vader_sentiment_score'], var_name='Sentiment', value_name='Score')\n","\n","# Create an interactive box plot using Plotly Express\n","fig = px.box(df_long_vader, x='country', y='Score', color='news_source', title='VADER Sentiment Scores by News Source and Country',\n","             labels={'Score': 'VADER Sentiment Score', 'country': 'Country', 'news_source': 'News Source'},\n","             category_orders={'country': sorted(df_long_vader['country'].unique())},\n","             width=1200, height=800)\n","\n","# Customize the appearance of the plot\n","fig.update_layout(title_x=0.5, xaxis_tickangle=-45, legend_title='News Source')\n","\n","# Show the interactive plot\n","fig.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":886},"id":"9ZVocu2hJumN","executionInfo":{"status":"ok","timestamp":1717392630471,"user_tz":-480,"elapsed":18,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"0d959742-9b96-4854-b8ae-6efd0bad9d26"},"execution_count":126,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"28e71e81-3b48-410b-9e0e-9daa8b09403d\" class=\"plotly-graph-div\" style=\"height:800px; width:1200px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"28e71e81-3b48-410b-9e0e-9daa8b09403d\")) {                    Plotly.newPlot(                        \"28e71e81-3b48-410b-9e0e-9daa8b09403d\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=CBSnews\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eVADER Sentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"CBSnews\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"CBSnews\",\"notched\":false,\"offsetgroup\":\"CBSnews\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.6556,-0.643,-0.9455,-0.5267,0.9901,-0.87,-0.9456,-0.953,0.8899,-0.9946,-0.9756,-0.9974,0.9133,0.9374,0.9737,0.988,-0.8435,-0.9949,0.9941,-0.8598,0.99,-0.9897,0.9879,0.6815,0.9998,-0.9369,0.6556,0.9215,0.9989,0.9937,0.9379,-0.9963,-0.643,0.9841,-0.9612,0.9638,0.9998,-0.6652,0.9638,0.9662,0.9904,0.8789,0.8705,0.9998,-0.9369,0.6556,0.9215,0.9989,0.2803,-0.9899,0.5766,-0.802,-0.9716,0.8033,-0.4224,-0.9969,-0.9935,-0.7501,0.8033,0.9984,0.8705,-0.9758,0.9529,-0.97,-0.9612,-0.9946,-1.0,-0.9999,-0.7501,-0.9348],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Foxnews\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eVADER Sentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Foxnews\",\"marker\":{\"color\":\"#EF553B\"},\"name\":\"Foxnews\",\"notched\":false,\"offsetgroup\":\"Foxnews\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\",\"US\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.941,0.8838,-0.9853,-0.9917,0.958,-0.9621,0.9912,0.9949,0.997,0.9357],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=TheHindu\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eVADER Sentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"TheHindu\",\"marker\":{\"color\":\"#00cc96\"},\"name\":\"TheHindu\",\"notched\":false,\"offsetgroup\":\"TheHindu\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.9652,0.9975,0.9501,0.9973,0.9985,0.9578,0.9674,0.0772,0.34,0.4118,0.8316,-0.7684,0.7045,0.955,0.9938,0.9629,0.9304,0.9386,0.9859,0.9418,0.998,0.9993,0.25,0.8541,0.0,-0.7717,0.9925,0.9973,0.5267,0.9941,0.9312,0.0772,0.34,0.4118,0.8316,0.9999,-0.5574,0.9694,0.802,0.4118,0.9936,0.9925,0.9953,0.0516,0.9951,0.9806,0.9895,0.7579,0.9934,0.967,0.6115,0.9994,0.8225,0.9999,-0.9894,-0.5574,0.959,0.9827,0.9312,-0.4588,0.9692,0.7876,0.9627,0.9936,0.9926,0.9863,-0.7684,0.9796,0.9895,0.979],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Times of India\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eVADER Sentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Times of India\",\"marker\":{\"color\":\"#ab63fa\"},\"name\":\"Times of India\",\"notched\":false,\"offsetgroup\":\"Times of India\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.9891,0.296,0.9955,0.996,-0.5346,-0.4939,-0.994,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.7717,0.9935,0.99,0.9949,0.7555,0.991,0.8692,0.9531,0.9879,0.9031,0.9267,0.8898,0.9447,0.8898,0.991,0.9744,0.9949,0.9913,-0.9012,-0.9357,-0.7991,0.9559,0.8879,0.9801,0.8289,0.9106,-0.4939,-0.994,0.9986,-0.9687,0.9979,0.9321,-0.9906,-0.9909,0.9822,0.947,0.8753,0.9958,-0.895,0.9635,0.997,0.5684,0.9836,0.9869,-0.5423,0.7816,0.7816,0.7816,0.7816,0.7816,0.7816,0.7816,0.9938,0.9842,0.8979,-0.9664,0.8283,0.9983,0.9965,0.8959,0.9937,0.9983,0.8759,0.9624,0.8877,0.9941,0.9853,0.6486,0.9623,0.7788,0.8674,0.7227,0.9891,0.836,0.9974,0.996,0.9001,0.9766,0.9981,0.9694,0.9913,-0.8139,0.7771,0.8777,0.7545,0.9719,-0.9604,0.9837,0.9861,-0.9334,-0.9586,-0.9246,0.9981,0.4316,0.9871,0.9973,0.9944,0.9694,0.9836,0.9756,0.9887,-0.8724,-0.9495,0.9741,0.9179,0.9869,0.9231,0.7908,0.9939,-0.4242,-0.9626,0.9766,0.9962,0.9977,0.7092,0.9703,0.9758,-0.9984,0.9705,-0.8964,0.9915,0.992,0.8815,0.6786,0.9874,0.5033,0.6124,0.9686,-0.594,0.7269,0.682,0.9829,0.9758,-0.8573,-0.8864,-0.353,0.9349,-0.8319,-0.8027,0.8856,0.9776,-0.988,-0.7506,-0.7906,0.4767,0.296,0.9955,0.9758,0.9805,0.9657,0.9949,0.9529,0.9965,0.9879,-0.9811,-0.3999,0.8955,-0.1436,-0.7147,-0.9446,0.9544,0.7764,0.8271,0.9186,0.8834,-0.8679,0.986,-0.9619,-0.9663,0.9905,0.9823,0.9832,0.6409,0.9866,0.992,0.9657,0.9325,0.801,0.9732,-0.9927,0.6124,0.9346,0.8035,0.9677,0.9761,0.8917,0.9989,0.9601,0.9891,0.836,0.4767,0.296,0.9955,0.9812,-0.4939,0.3597,-0.0665,0.9349,0.9032,-0.3025,0.9506,-0.2746,0.2462,0.9642,0.9958,0.9919,0.9798,0.988,0.9843,0.9555,0.9865,0.9771,0.7717,0.9608,0.9935,0.9758,0.99],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"News Source=Firstpost\\u003cbr\\u003eCountry=%{x}\\u003cbr\\u003eVADER Sentiment Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Firstpost\",\"marker\":{\"color\":\"#FFA15A\"},\"name\":\"Firstpost\",\"notched\":false,\"offsetgroup\":\"Firstpost\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\",\"India\"],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[0.9984,0.9977,0.9348,0.9984,0.9977,0.9348,0.9984,0.9977,0.9348,0.9984,0.9977,0.9348,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949,0.9986,0.9976,0.9815,0.9352,0.9958,0.996,-0.9997,0.9946,0.9559,-0.9949],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Country\"},\"categoryorder\":\"array\",\"categoryarray\":[\"India\",\"US\"],\"tickangle\":-45},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"VADER Sentiment Score\"}},\"legend\":{\"title\":{\"text\":\"News Source\"},\"tracegroupgap\":0},\"title\":{\"text\":\"VADER Sentiment Scores by News Source and Country\",\"x\":0.5},\"boxmode\":\"group\",\"height\":800,\"width\":1200},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('28e71e81-3b48-410b-9e0e-9daa8b09403d');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["Positive Sentiment: Scores closer to 1 indicate positive sentiment. For example, a score of 0.8 might indicate that the text has a generally positive tone.\n","\n","Neutral Sentiment: Scores around 0 (zero) usually indicate neutral sentiment, meaning the text doesn't convey strong positive or negative emotions.\n","\n","Negative Sentiment: Scores closer to -1 indicate negative sentiment. For example, a score of -0.8 might indicate that the text has a generally negative tone."],"metadata":{"id":"ZVlSma9hw5Of"}},{"cell_type":"markdown","source":["##Topic Modeling with Sentiment Analysis"],"metadata":{"id":"s4EMhmVFEEc-"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.decomposition import LatentDirichletAllocation\n","from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","\n","# Assuming 'df' is your DataFrame and it has been already defined and loaded\n","\n","# Initialize the VADER sentiment analyzer\n","analyzer = SentimentIntensityAnalyzer()\n","\n","# Function to calculate sentiment score using VADER\n","def calculate_vader_sentiment(text):\n","    sentiment_score = analyzer.polarity_scores(text)\n","    return sentiment_score['compound']  # Using compound score as an overall sentiment score\n","\n","# Ensure all entries in 'article_text' are strings\n","df['article_text'] = df['article_text'].astype(str)\n","\n","# Add a new column for VADER sentiment scores to the DataFrame\n","df['vader_sentiment_score'] = df['article_text'].apply(calculate_vader_sentiment)\n","\n","# Vectorize the text data\n","vectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')\n","dtm = vectorizer.fit_transform(df['article_text'])\n","\n","# Fit the LDA model\n","lda = LatentDirichletAllocation(n_components=10, random_state=42)\n","lda.fit(dtm)\n","\n","# Function to get the top words for each topic\n","def print_top_words(model, feature_names, n_top_words):\n","    for topic_idx, topic in enumerate(model.components_):\n","        print(f\"Topic #{topic_idx}:\")\n","        print(\" \".join([feature_names[i]\n","                        for i in topic.argsort()[:-n_top_words - 1:-1]]))\n","    print()\n","\n","# Get the feature names (words) from the vectorizer\n","tf_feature_names = vectorizer.get_feature_names_out()\n","\n","# Print the top words for each topic\n","print_top_words(lda, tf_feature_names, n_top_words=10)\n","\n","# Get the topic distribution for each document\n","topic_distribution = lda.transform(dtm)\n","\n","# Add the topic distribution to the DataFrame\n","for i in range(lda.n_components):\n","    df[f'topic_{i}_distribution'] = topic_distribution[:, i]\n","\n","# Group by news source and aggregate sentiment scores for each topic\n","topic_sentiment_by_source = df.groupby('news_source')[['vader_sentiment_score'] + [f'topic_{i}_distribution' for i in range(lda.n_components)]].mean()\n","\n","# Reset index to make it a DataFrame\n","topic_sentiment_by_source.reset_index(inplace=True)\n","\n","# Display the aggregated sentiment scores for each topic by news source\n","print(topic_sentiment_by_source)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lSzcQJZlEIKu","executionInfo":{"status":"ok","timestamp":1717393323211,"user_tz":-480,"elapsed":38872,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"18fcd58c-8bc7-4cac-968d-389586ba3f1e"},"execution_count":136,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Topic #0:\n","bjp said ago congress party modi elections minister day polling\n","Topic #1:\n","seats nda bjp alliance congress said poll india predicted indi\n","Topic #2:\n","ago 00 hours exit bjp results day modi polls 2024\n","Topic #3:\n","margaret brennan think trump burgum president election know governor like\n","Topic #4:\n","exit polls elections seats india nda election poll advertisement voters\n","Topic #5:\n","trump said president news campaign biden new tim haley time\n","Topic #6:\n","kejriwal rsquo maliwal aap kumar bjp delhi party rdquo ldquo\n","Topic #7:\n","party sikkim mr assembly bjp seats skm court state election\n","Topic #8:\n","ago lok sabha bjp 00 votes days hours kejriwal elections\n","Topic #9:\n","candidates cases criminal phase charges murder women declared bharat face\n","\n","      news_source  vader_sentiment_score  topic_0_distribution  \\\n","0         CBSnews               0.025656              0.043466   \n","1       Firstpost               0.627943              0.000237   \n","2         Foxnews               0.376250              0.011293   \n","3        TheHindu               0.672650              0.316373   \n","4  Times of India               0.523505              0.371924   \n","\n","   topic_1_distribution  topic_2_distribution  topic_3_distribution  \\\n","0              0.057997              0.000356              0.180619   \n","1              0.122902              0.000237              0.101452   \n","2              0.027808              0.000392              0.033228   \n","3              0.082446              0.086100              0.008536   \n","4              0.075281              0.223758              0.007376   \n","\n","   topic_4_distribution  topic_5_distribution  topic_6_distribution  \\\n","0              0.006392              0.497764              0.001997   \n","1              0.417608              0.000237              0.267582   \n","2              0.011468              0.818711              0.001611   \n","3              0.071691              0.081114              0.015823   \n","4              0.041547              0.012605              0.013681   \n","\n","   topic_7_distribution  topic_8_distribution  topic_9_distribution  \n","0              0.060638              0.043765              0.107004  \n","1              0.000237              0.000237              0.089271  \n","2              0.005951              0.000392              0.089146  \n","3              0.285037              0.026403              0.026477  \n","4              0.053001              0.193183              0.007644  \n"]}]},{"cell_type":"markdown","source":["##Named Entity Recognition"],"metadata":{"id":"GRPKd8jpvh25"}},{"cell_type":"code","source":["def extract_entities_by_type(text):\n","    if isinstance(text, str):  # Ensure the input is a string\n","        doc = nlp(text)\n","        entities = {\n","            'PERSON': [],\n","            'ORG': [],\n","            'GPE': [],\n","            'DATE': [],\n","            'TIME': [],\n","            'CARDINAL': [],\n","            'MONEY': [],\n","            'NORP': [],\n","            # Add other entity types as needed\n","        }\n","        for ent in doc.ents:\n","            if ent.label_ in entities:\n","                entities[ent.label_].append(ent.text)\n","        return entities\n","    else:\n","        return {label: [] for label in ['PERSON', 'ORG', 'GPE', 'DATE', 'TIME', 'CARDINAL', 'MONEY', 'NORP']}  # Return empty lists for non-string values\n"],"metadata":{"id":"4pn7i0RHoHLK","executionInfo":{"status":"ok","timestamp":1717392862010,"user_tz":-480,"elapsed":3,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"41092fef-9b8c-420a-fd16-41914a2733de"},"execution_count":129,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]}]},{"cell_type":"code","source":["# Load SpaCy model\n","nlp = spacy.load('en_core_web_sm')\n","entity_df = df_concat['article_text'].apply(extract_entities_by_type).apply(pd.Series)\n","entity_df"],"metadata":{"id":"VNRBsRuoowk4","colab":{"base_uri":"https://localhost:8080/","height":667},"executionInfo":{"status":"ok","timestamp":1717392942227,"user_tz":-480,"elapsed":78288,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"b179603c-6231-40db-b2b3-4b56645fc936"},"execution_count":130,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                PERSON  \\\n","0    [Donald Trump, Dana White, Biden, Taylor Budow...   \n","1    [Rebecca Roiphe, Donald Trump, Joe Biden, Dona...   \n","2    [Donald Trump, Trump, Trump, Trump, Trump, Don...   \n","3    [Donald Trump, Donald Trump, Biden, Biden, Bid...   \n","4    [Robert F. Kennedy Jr.'s, Kennedy, Gavin De Be...   \n","..                                                 ...   \n","491  [Lok Sabha, Abraham Lincoln, Advertisement Lig...   \n","492    [The Lok Sabha, Lok Sabha, Advertisement Among]   \n","493  [Advertisement India, Advertisement Why, Labor...   \n","494  [Arvind Kejriwal, Narendra Modi, Bibhav Kumar,...   \n","495  [Lok Sabha, Kejriwal, Rajya Sabha, Bibhav Kuma...   \n","\n","                                                   ORG  \\\n","0    [TikTok, Trump, Ultimate Fighting Championship...   \n","1    [CBS News, Roiphe, Trump, Roiphe, Trump, Trump...   \n","2    [Views, Trump, Trump, Trump, Trump, Trump, CBS...   \n","3    [Trump, CBS News, Trump, the White House, Trum...   \n","4    [The Democratic National Committee, the Federa...   \n","..                                                 ...   \n","491  [YouTube, the El Niño-Southern Oscillation, bi...   \n","492  [the Association for Democratic Reforms (, ADR...   \n","493  [The World Decides, Joko Widodo, Trump, CEC, E...   \n","494  [the Supreme Court, AAP, the Enforcement Direc...   \n","495  [the Supreme Court, Maliwal, FIR, AAP, Kejriwa...   \n","\n","                                                   GPE  \\\n","0    [Washington, U.S., Newark, New Jersey, the New...   \n","1    [the United States, New York, New York, New York]   \n","2                [New York, U.S., U.S., New York City]   \n","3    [Manhattan, New York, Manhattan, Manhattan, Ne...   \n","4     [Georgia, Arizona, Michigan, Michigan, Michigan]   \n","..                                                 ...   \n","491  [India, N, Ramagundam, Kovai, Gandhinagar, Sou...   \n","492                                            [India]   \n","493  [US, Russia, India, Taiwan, India, India, Indi...   \n","494  [Delhi, Delhi, Delhi, Delhi, Delhi, Delhi, Del...   \n","495  [Delhi, Delhi, Delhi, Delhi, stomach&rsquo, Ku...   \n","\n","                                                  DATE  \\\n","0    [Saturday, Saturday, days earlier, Earlier thi...   \n","1    [this past week, a day, five weeks, Friday, Ju...   \n","2    [three quarters, May 30-June 1, 2024, May 14-2...   \n","3    [Thursday, Friday, Friday, Friday, Friday, Thu...   \n","4    [this week, 2024, Thursday, April, February, 2...   \n","..                                                 ...   \n","491  [June 4, this year, a few months, the hot summ...   \n","492  [25 May and 1 June, 19 April, 26 April, 7 May,...   \n","493  [election year, the last five years, this Mond...   \n","494  [10 May, 2 June, 21 March, 21 days, 13 May, th...   \n","495  [Thursday, a few weeks, Wednesday, Thursday, n...   \n","\n","                            TIME  \\\n","0             [Sunday afternoon]   \n","1                     [24 hours]   \n","2                             []   \n","3    [morning, morning, morning]   \n","4                             []   \n","..                           ...   \n","491                      [11 am]   \n","492                           []   \n","493                           []   \n","494                       [noon]   \n","495                           []   \n","\n","                                              CARDINAL  \\\n","0                            [more than 2 million, 34]   \n","1                      [34, seven, five, one, 34, one]   \n","2    [Just over half, just over half, half, nine, 1...   \n","3         [four, 10, at least seven, at least 54, two]   \n","4                                               [five]   \n","..                                                 ...   \n","491  [180, 200, 250, 272, 303, 320, 362, 370, 400, ...   \n","492  [1,644, 8,337, 1,188, 1, 1,618, 252, 161, seve...   \n","493  [900 million, seven, Over fifty, Fifty-one, 0....   \n","494                                       [two, seven]   \n","495                                   [two, thousands]   \n","\n","                                                 MONEY  \\\n","0                                                   []   \n","1                              [more than $50 million]   \n","2                                                   []   \n","3                         [10,000, 35, 15, $1 million]   \n","4    [$2 million, $4 million, about $10 million, $9...   \n","..                                                 ...   \n","491                                 [72 micro-seasons]   \n","492  [52 per cent, 18 per cent, 21 per cent, Around...   \n","493  [46 per cent, 59 per cent, 67 per cent, more t...   \n","494                                                 []   \n","495                                                 []   \n","\n","                                                  NORP  \n","0                                            [Chinese]  \n","1                 [Republicans, Republicans, American]  \n","2    [Republicans, Americans, Democrats, Republican...  \n","3         [Democrats, Democrats, Democrats, Authentic]  \n","4                                 [American, American]  \n","..                                                 ...  \n","491  [Indian, Indian, Indian, Indian, Japanese, Mus...  \n","492                                                 []  \n","493  [Indian, Indian, Indians, Indian, Indian, Indi...  \n","494  [Kejriwal, Kejriwal&rsquo;s, Kejriwal&rsquo;s,...  \n","495  [Kejriwal, Kejriwal, Kejriwal, Kejriwal, Kejri...  \n","\n","[496 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-af63ad1d-331f-41ab-8d55-80a636db165b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PERSON</th>\n","      <th>ORG</th>\n","      <th>GPE</th>\n","      <th>DATE</th>\n","      <th>TIME</th>\n","      <th>CARDINAL</th>\n","      <th>MONEY</th>\n","      <th>NORP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[Donald Trump, Dana White, Biden, Taylor Budow...</td>\n","      <td>[TikTok, Trump, Ultimate Fighting Championship...</td>\n","      <td>[Washington, U.S., Newark, New Jersey, the New...</td>\n","      <td>[Saturday, Saturday, days earlier, Earlier thi...</td>\n","      <td>[Sunday afternoon]</td>\n","      <td>[more than 2 million, 34]</td>\n","      <td>[]</td>\n","      <td>[Chinese]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[Rebecca Roiphe, Donald Trump, Joe Biden, Dona...</td>\n","      <td>[CBS News, Roiphe, Trump, Roiphe, Trump, Trump...</td>\n","      <td>[the United States, New York, New York, New York]</td>\n","      <td>[this past week, a day, five weeks, Friday, Ju...</td>\n","      <td>[24 hours]</td>\n","      <td>[34, seven, five, one, 34, one]</td>\n","      <td>[more than $50 million]</td>\n","      <td>[Republicans, Republicans, American]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[Donald Trump, Trump, Trump, Trump, Trump, Don...</td>\n","      <td>[Views, Trump, Trump, Trump, Trump, Trump, CBS...</td>\n","      <td>[New York, U.S., U.S., New York City]</td>\n","      <td>[three quarters, May 30-June 1, 2024, May 14-2...</td>\n","      <td>[]</td>\n","      <td>[Just over half, just over half, half, nine, 1...</td>\n","      <td>[]</td>\n","      <td>[Republicans, Americans, Democrats, Republican...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[Donald Trump, Donald Trump, Biden, Biden, Bid...</td>\n","      <td>[Trump, CBS News, Trump, the White House, Trum...</td>\n","      <td>[Manhattan, New York, Manhattan, Manhattan, Ne...</td>\n","      <td>[Thursday, Friday, Friday, Friday, Friday, Thu...</td>\n","      <td>[morning, morning, morning]</td>\n","      <td>[four, 10, at least seven, at least 54, two]</td>\n","      <td>[10,000, 35, 15, $1 million]</td>\n","      <td>[Democrats, Democrats, Democrats, Authentic]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[Robert F. Kennedy Jr.'s, Kennedy, Gavin De Be...</td>\n","      <td>[The Democratic National Committee, the Federa...</td>\n","      <td>[Georgia, Arizona, Michigan, Michigan, Michigan]</td>\n","      <td>[this week, 2024, Thursday, April, February, 2...</td>\n","      <td>[]</td>\n","      <td>[five]</td>\n","      <td>[$2 million, $4 million, about $10 million, $9...</td>\n","      <td>[American, American]</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>[Lok Sabha, Abraham Lincoln, Advertisement Lig...</td>\n","      <td>[YouTube, the El Niño-Southern Oscillation, bi...</td>\n","      <td>[India, N, Ramagundam, Kovai, Gandhinagar, Sou...</td>\n","      <td>[June 4, this year, a few months, the hot summ...</td>\n","      <td>[11 am]</td>\n","      <td>[180, 200, 250, 272, 303, 320, 362, 370, 400, ...</td>\n","      <td>[72 micro-seasons]</td>\n","      <td>[Indian, Indian, Indian, Indian, Japanese, Mus...</td>\n","    </tr>\n","    <tr>\n","      <th>492</th>\n","      <td>[The Lok Sabha, Lok Sabha, Advertisement Among]</td>\n","      <td>[the Association for Democratic Reforms (, ADR...</td>\n","      <td>[India]</td>\n","      <td>[25 May and 1 June, 19 April, 26 April, 7 May,...</td>\n","      <td>[]</td>\n","      <td>[1,644, 8,337, 1,188, 1, 1,618, 252, 161, seve...</td>\n","      <td>[52 per cent, 18 per cent, 21 per cent, Around...</td>\n","      <td>[]</td>\n","    </tr>\n","    <tr>\n","      <th>493</th>\n","      <td>[Advertisement India, Advertisement Why, Labor...</td>\n","      <td>[The World Decides, Joko Widodo, Trump, CEC, E...</td>\n","      <td>[US, Russia, India, Taiwan, India, India, Indi...</td>\n","      <td>[election year, the last five years, this Mond...</td>\n","      <td>[]</td>\n","      <td>[900 million, seven, Over fifty, Fifty-one, 0....</td>\n","      <td>[46 per cent, 59 per cent, 67 per cent, more t...</td>\n","      <td>[Indian, Indian, Indians, Indian, Indian, Indi...</td>\n","    </tr>\n","    <tr>\n","      <th>494</th>\n","      <td>[Arvind Kejriwal, Narendra Modi, Bibhav Kumar,...</td>\n","      <td>[the Supreme Court, AAP, the Enforcement Direc...</td>\n","      <td>[Delhi, Delhi, Delhi, Delhi, Delhi, Delhi, Del...</td>\n","      <td>[10 May, 2 June, 21 March, 21 days, 13 May, th...</td>\n","      <td>[noon]</td>\n","      <td>[two, seven]</td>\n","      <td>[]</td>\n","      <td>[Kejriwal, Kejriwal&amp;rsquo;s, Kejriwal&amp;rsquo;s,...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>[Lok Sabha, Kejriwal, Rajya Sabha, Bibhav Kuma...</td>\n","      <td>[the Supreme Court, Maliwal, FIR, AAP, Kejriwa...</td>\n","      <td>[Delhi, Delhi, Delhi, Delhi, stomach&amp;rsquo, Ku...</td>\n","      <td>[Thursday, a few weeks, Wednesday, Thursday, n...</td>\n","      <td>[]</td>\n","      <td>[two, thousands]</td>\n","      <td>[]</td>\n","      <td>[Kejriwal, Kejriwal, Kejriwal, Kejriwal, Kejri...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>496 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af63ad1d-331f-41ab-8d55-80a636db165b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af63ad1d-331f-41ab-8d55-80a636db165b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af63ad1d-331f-41ab-8d55-80a636db165b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-eea308e3-eb16-462a-8c34-aec07a5c973c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eea308e3-eb16-462a-8c34-aec07a5c973c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-eea308e3-eb16-462a-8c34-aec07a5c973c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_35114f46-489c-4ed0-8fea-9a7b36060339\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('entity_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_35114f46-489c-4ed0-8fea-9a7b36060339 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('entity_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"entity_df","summary":"{\n  \"name\": \"entity_df\",\n  \"rows\": 496,\n  \"fields\": [\n    {\n      \"column\": \"PERSON\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ORG\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GPE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TIME\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CARDINAL\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MONEY\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NORP\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":130}]},{"cell_type":"code","source":["df_concat = pd.concat([df_concat, entity_df], axis=1)\n","df_concat.head()"],"metadata":{"id":"pLcyrK_7p-H2","executionInfo":{"status":"ok","timestamp":1717392942229,"user_tz":-480,"elapsed":32,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"colab":{"base_uri":"https://localhost:8080/","height":833},"outputId":"f65a39f4-b990-4508-842b-458a937c994a"},"execution_count":131,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["                                               title  \\\n","0  Donald Trump joins TikTok after reversal on ap...   \n","1  Trump's guilty verdict: A stress test for demo...   \n","2  Views of Trump trial unchanged following verdi...   \n","3  Fact checking Trump's remarks after historic c...   \n","4  DNC files complaint alleging shady fundraising...   \n","\n","                                                href  \\\n","0  https://www.cbsnews.com/news/donald-trump-join...   \n","1  https://www.cbsnews.com/news/trumps-guilty-ver...   \n","2  https://www.cbsnews.com/news/trump-verdict-new...   \n","3  https://www.cbsnews.com/news/fact-check-trump-...   \n","4  https://www.cbsnews.com/news/rfk-jr-super-pac-...   \n","\n","                                             summary  \\\n","0  While in office, Trump took issue with the soc...   \n","1  Being found guilty of 34 felony counts would n...   \n","2  Half the country says Trump is not fit to be p...   \n","3  CBS News fact checked four misleading claims T...   \n","4  The Democratic National Committee accuses the ...   \n","\n","                                        article_text news_source country  \\\n","0  Washington — Former President Donald Trump has...     CBSnews      US   \n","1  Historic … unprecedented … and guilty. You cou...     CBSnews      US   \n","2  Views about former President Donald Trump's Ne...     CBSnews      US   \n","3  Former President Donald Trump's Manhattan crim...     CBSnews      US   \n","4  The Democratic National Committee this week fi...     CBSnews      US   \n","\n","  news_label                                     processed_text  \\\n","0       Left  [washington, president, donald, trump, join, t...   \n","1       Left  [historic, unprecedented, guilty, escape, word...   \n","2       Left  [view, president, donald, trump, new, york, cr...   \n","3       Left  [president, donald, trump, manhattan, criminal...   \n","4       Left  [democratic, national, committee, week, file, ...   \n","\n","   article_sentiment_score  vader_sentiment_score  \\\n","0                -0.010646                 0.6556   \n","1                -0.016133                -0.6430   \n","2                -0.080148                -0.9455   \n","3                 0.025810                -0.5267   \n","4                 0.052793                 0.9901   \n","\n","                                              PERSON  \\\n","0  [Donald Trump, Dana White, Biden, Taylor Budow...   \n","1  [Rebecca Roiphe, Donald Trump, Joe Biden, Dona...   \n","2  [Donald Trump, Trump, Trump, Trump, Trump, Don...   \n","3  [Donald Trump, Donald Trump, Biden, Biden, Bid...   \n","4  [Robert F. Kennedy Jr.'s, Kennedy, Gavin De Be...   \n","\n","                                                 ORG  \\\n","0  [TikTok, Trump, Ultimate Fighting Championship...   \n","1  [CBS News, Roiphe, Trump, Roiphe, Trump, Trump...   \n","2  [Views, Trump, Trump, Trump, Trump, Trump, CBS...   \n","3  [Trump, CBS News, Trump, the White House, Trum...   \n","4  [The Democratic National Committee, the Federa...   \n","\n","                                                 GPE  \\\n","0  [Washington, U.S., Newark, New Jersey, the New...   \n","1  [the United States, New York, New York, New York]   \n","2              [New York, U.S., U.S., New York City]   \n","3  [Manhattan, New York, Manhattan, Manhattan, Ne...   \n","4   [Georgia, Arizona, Michigan, Michigan, Michigan]   \n","\n","                                                DATE  \\\n","0  [Saturday, Saturday, days earlier, Earlier thi...   \n","1  [this past week, a day, five weeks, Friday, Ju...   \n","2  [three quarters, May 30-June 1, 2024, May 14-2...   \n","3  [Thursday, Friday, Friday, Friday, Friday, Thu...   \n","4  [this week, 2024, Thursday, April, February, 2...   \n","\n","                          TIME  \\\n","0           [Sunday afternoon]   \n","1                   [24 hours]   \n","2                           []   \n","3  [morning, morning, morning]   \n","4                           []   \n","\n","                                            CARDINAL  \\\n","0                          [more than 2 million, 34]   \n","1                    [34, seven, five, one, 34, one]   \n","2  [Just over half, just over half, half, nine, 1...   \n","3       [four, 10, at least seven, at least 54, two]   \n","4                                             [five]   \n","\n","                                               MONEY  \\\n","0                                                 []   \n","1                            [more than $50 million]   \n","2                                                 []   \n","3                       [10,000, 35, 15, $1 million]   \n","4  [$2 million, $4 million, about $10 million, $9...   \n","\n","                                                NORP  \n","0                                          [Chinese]  \n","1               [Republicans, Republicans, American]  \n","2  [Republicans, Americans, Democrats, Republican...  \n","3       [Democrats, Democrats, Democrats, Authentic]  \n","4                               [American, American]  "],"text/html":["\n","  <div id=\"df-dac16fbc-864f-43aa-9b86-b7035695512d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>href</th>\n","      <th>summary</th>\n","      <th>article_text</th>\n","      <th>news_source</th>\n","      <th>country</th>\n","      <th>news_label</th>\n","      <th>processed_text</th>\n","      <th>article_sentiment_score</th>\n","      <th>vader_sentiment_score</th>\n","      <th>PERSON</th>\n","      <th>ORG</th>\n","      <th>GPE</th>\n","      <th>DATE</th>\n","      <th>TIME</th>\n","      <th>CARDINAL</th>\n","      <th>MONEY</th>\n","      <th>NORP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Donald Trump joins TikTok after reversal on ap...</td>\n","      <td>https://www.cbsnews.com/news/donald-trump-join...</td>\n","      <td>While in office, Trump took issue with the soc...</td>\n","      <td>Washington — Former President Donald Trump has...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","      <td>[washington, president, donald, trump, join, t...</td>\n","      <td>-0.010646</td>\n","      <td>0.6556</td>\n","      <td>[Donald Trump, Dana White, Biden, Taylor Budow...</td>\n","      <td>[TikTok, Trump, Ultimate Fighting Championship...</td>\n","      <td>[Washington, U.S., Newark, New Jersey, the New...</td>\n","      <td>[Saturday, Saturday, days earlier, Earlier thi...</td>\n","      <td>[Sunday afternoon]</td>\n","      <td>[more than 2 million, 34]</td>\n","      <td>[]</td>\n","      <td>[Chinese]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Trump's guilty verdict: A stress test for demo...</td>\n","      <td>https://www.cbsnews.com/news/trumps-guilty-ver...</td>\n","      <td>Being found guilty of 34 felony counts would n...</td>\n","      <td>Historic … unprecedented … and guilty. You cou...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","      <td>[historic, unprecedented, guilty, escape, word...</td>\n","      <td>-0.016133</td>\n","      <td>-0.6430</td>\n","      <td>[Rebecca Roiphe, Donald Trump, Joe Biden, Dona...</td>\n","      <td>[CBS News, Roiphe, Trump, Roiphe, Trump, Trump...</td>\n","      <td>[the United States, New York, New York, New York]</td>\n","      <td>[this past week, a day, five weeks, Friday, Ju...</td>\n","      <td>[24 hours]</td>\n","      <td>[34, seven, five, one, 34, one]</td>\n","      <td>[more than $50 million]</td>\n","      <td>[Republicans, Republicans, American]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Views of Trump trial unchanged following verdi...</td>\n","      <td>https://www.cbsnews.com/news/trump-verdict-new...</td>\n","      <td>Half the country says Trump is not fit to be p...</td>\n","      <td>Views about former President Donald Trump's Ne...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","      <td>[view, president, donald, trump, new, york, cr...</td>\n","      <td>-0.080148</td>\n","      <td>-0.9455</td>\n","      <td>[Donald Trump, Trump, Trump, Trump, Trump, Don...</td>\n","      <td>[Views, Trump, Trump, Trump, Trump, Trump, CBS...</td>\n","      <td>[New York, U.S., U.S., New York City]</td>\n","      <td>[three quarters, May 30-June 1, 2024, May 14-2...</td>\n","      <td>[]</td>\n","      <td>[Just over half, just over half, half, nine, 1...</td>\n","      <td>[]</td>\n","      <td>[Republicans, Americans, Democrats, Republican...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fact checking Trump's remarks after historic c...</td>\n","      <td>https://www.cbsnews.com/news/fact-check-trump-...</td>\n","      <td>CBS News fact checked four misleading claims T...</td>\n","      <td>Former President Donald Trump's Manhattan crim...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","      <td>[president, donald, trump, manhattan, criminal...</td>\n","      <td>0.025810</td>\n","      <td>-0.5267</td>\n","      <td>[Donald Trump, Donald Trump, Biden, Biden, Bid...</td>\n","      <td>[Trump, CBS News, Trump, the White House, Trum...</td>\n","      <td>[Manhattan, New York, Manhattan, Manhattan, Ne...</td>\n","      <td>[Thursday, Friday, Friday, Friday, Friday, Thu...</td>\n","      <td>[morning, morning, morning]</td>\n","      <td>[four, 10, at least seven, at least 54, two]</td>\n","      <td>[10,000, 35, 15, $1 million]</td>\n","      <td>[Democrats, Democrats, Democrats, Authentic]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>DNC files complaint alleging shady fundraising...</td>\n","      <td>https://www.cbsnews.com/news/rfk-jr-super-pac-...</td>\n","      <td>The Democratic National Committee accuses the ...</td>\n","      <td>The Democratic National Committee this week fi...</td>\n","      <td>CBSnews</td>\n","      <td>US</td>\n","      <td>Left</td>\n","      <td>[democratic, national, committee, week, file, ...</td>\n","      <td>0.052793</td>\n","      <td>0.9901</td>\n","      <td>[Robert F. Kennedy Jr.'s, Kennedy, Gavin De Be...</td>\n","      <td>[The Democratic National Committee, the Federa...</td>\n","      <td>[Georgia, Arizona, Michigan, Michigan, Michigan]</td>\n","      <td>[this week, 2024, Thursday, April, February, 2...</td>\n","      <td>[]</td>\n","      <td>[five]</td>\n","      <td>[$2 million, $4 million, about $10 million, $9...</td>\n","      <td>[American, American]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dac16fbc-864f-43aa-9b86-b7035695512d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dac16fbc-864f-43aa-9b86-b7035695512d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dac16fbc-864f-43aa-9b86-b7035695512d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c229d1ae-c2c7-4a70-be28-f8212585fb26\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c229d1ae-c2c7-4a70-be28-f8212585fb26')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c229d1ae-c2c7-4a70-be28-f8212585fb26 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_concat","summary":"{\n  \"name\": \"df_concat\",\n  \"rows\": 496,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 354,\n        \"samples\": [\n          \"Chhattisgarh's Raipur Lok Sabha Election 2024: Date of voting, result, candidates, main parties, schedule\",\n          \"The FDA is weighing approval of MDMA for PTSD. Here's what patients could see.\",\n          \"Congress delegation meets ECI demanding re-poll in Tripura West\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"href\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 367,\n        \"samples\": [\n          \"https://timesofindia.indiatimes.com/elections/lok-sabha-elections/tamil-nadu/news/tamil-nadu-lok-sabha-exit-poll-results-dmk-expected-to-bag-26-seats-bjp-nda-may-open-account/articleshow/110622750.cms\",\n          \"https://www.cbsnews.com/news/rupert-murdoch-marries-5th-time-elena-zhukova/\",\n          \"https://www.cbsnews.com/news/nato-allies-brace-possible-trump-president/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 250,\n        \"samples\": [\n          \"Former Calcutta High Court judge Abhijit Ganguly barred by Election Commission for offensive remarks against Mamata Banerjee in West Bengal. BJP candidate censured for violating Model Code of Conduct in Tamluk campaign, prompting action from EC and criticism from opponent Trinamool. Trinamool youth leader Debangshu Bhattacharya condemns Ganguly's comments and calls out BJP's behavior.\",\n          \"President Biden said the \\\"American principle that no one is above the law was reaffirmed\\\" after Trump was convicted on 34 felony counts of falsifying business records.\",\n          \"Pens, water bottles, spy cameras, button cameras, mobile phones and other electronic gadgets will not be allowed into the counting venue, says SP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"article_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 349,\n        \"samples\": [\n          \"NASHIK: In the heart of the country\\u2019s \\u2018onion bowl\\u2019, Lasalgaon, Ganesh Kokane produces more than 200 quintals of the kitchen staple every year. Auctioning them for Rs 2,500-Rs 3,000 per quintal at APMC mandi would cover his expenses and, in good times, even fetch him a good profit. However, last Nov, unseasonal rains wreaked havoc as the crop was ready for harvest. All he could salvage from his 25 acres was a meagre 25 quintals. Then, before Kokane could recover from the blow, the Centre announced a ban on export of onions in the first week of Dec. \\u201cI was forced to sell off my stock for Rs 1,000 a quintal. It was a double whammy,\\u201d Ganesh said. Videos 00:58 INDIA Bloc Senior Leaders Meet At Kharge\\u2019s Residence As Countdown To Lok Sabha Results Begins 16 hours ago 00:53 Modi's Last Day Of Meditation In Kanyakumari As Exit Polls Near 16 hours ago 00:58 'Modi's Army': Kangana Ranaut After Casting Vote In Mandi | LS Polls 16 hours ago 00:58 BJP\\u2019s Tejaswi Surya Decodes Karnataka & Andhra Pradesh Exit Poll Results 2024 | Watch 16 hours ago 00:57 Lok Sabha Election 2024 Verdict Sealed As 7-Phase Polling Season Closes | All Eyes On June 4 Results 16 hours ago 00:57 \\u201cResults Will Be Different\\u2026\\u201d Congress Leader Predicts Victory In Gujarat | Exit Polls 2024 16 hours ago 00:55 \\u201cNDA Will Lose\\u2026\\u201d DMK Leader Predicts Big Win For INDIA Alliance | Exit Poll 2024 17 hours ago 00:59 \\u2018My Life Dedicated\\u2026\\u2019 PM Modi Writes Letter After 45-Hour Meditation At Kanyakumari | Watch 17 hours ago 00:43 'Even If I Have To Stay In Jail My Whole Life': Delhi Chief Minister Arvind Kejriwal 18 hours ago 00:54 Mob Throws EVM Machine Into Pond In Bengal\\u2019s South 24-Parganas | LS Election 2024 Phase 7 22 hours ago 1 2 3 4 5 6 But his ordeal had just begun. As moneylenders turned up the heat on Kokane, he was forced to find other sources of income. He finally ended up as a labourer at the APMC. Arunachal Pradesh Sikkim Arunachal Pradesh Seats: 60 Results Majority: 31 BJP 46 NPP 5 CONG 1 OTH 8 Results : 60 / 60 BJP WON Sikkim Seats: 32 Results Majority: 17 SKM 31 SDF 1 BJP 0 CONG 0 OTH 0 Results : 32 / 32 SKM WON Source: Pvalue \\u201cI blame the Union govt for my plight. Even though it lifted the embargo later on, it did not help improve the wholesale prices,\\u201d he said. Now, he earns a paltry Rs 40 for unloading onions from farmers \\u2019 tractors and loading them on to traders\\u2019 vehicles. He handles about 10-15 vehicles daily. Kokane\\u2019s is not an isolated case. Distress and anger are palpable among nearly 8 lakh voters who are directly or indirectly associated with onion cultivation in the Dindori LS seat, which comprises six assembly segments \\u2014 Nandgaon , Kalwan, Yeola, Chandwad, Niphad, and Dindori. Voting here is on May 20. At the receiving end of the ire is BJP candidate and Union minister Bharati Pawar , who is under immense pressure to retain the seat that the saffron party has held since 2009. Shiv Sena MLA from Nandgaon, Suhas Kande, said Mahayuti bigwigs are working overtime to contain farmers\\u2019 resentment. \\u201cBut in no way will (Bhaskar) Bhagare\\u2019s victory help stabilise prices. Organisationally, Mahayuti is strong and that alone will ensure Bharati Pawar\\u2019s victory.\\u201d Bhagare, a schoolteacher, is the NCP (SCP) nominee. Party insiders say their chief Sharad Pawar picked him for his clean image and popularity. A BJP politician, who did not want to be named, said farmers snub them when they visit villages for campaigning. \\u201cTo placate them, we are highlighting the multiple schemes run by the Centre, including the PM Kisan Samman Nidhi that provides Rs 6,000 annually to marginal farmers.\\u201d In April, residents of Malwadi put up a board requesting the current MP not to visit their village. \\u201cBefore the ban came into effect, we were getting Rs 2,500-Rs 3,000 per quintal. Now, prices have dropped while fertilisers and petrol have become dearer,\\u201d said Ganesh Ahire of Nandgaon taluk. While accepting that Bharati Pawar faces the ire of onion growers, a state Cabinet minister said: \\u201cThe unseasonal rain severely hit the crop in Dindori. Had the Centre not banned exports, there would\\u2019ve been huge shortages in the country. That would\\u2019ve complicated matters for NDA, especially in urban areas.\\u201d What has further queered the pitch for BJP is CPI(M) nominee Je eva Pandu Gavit\\u2019s withdrawal from the race. CPI(M) had fielded Gavit in 2019, too and he had got more than one lakh votes. Anticipating that Gavit might repeat his performance and take away anti-BJP votes, Sharad Pawar convinced the CPI(M) brass to pull him from the race. Bharati Pawar, however, claims the opposition is misleading farmers. \\u201cWhen Sharad Pawar was the Union agriculture minister under UPA, prices of onion had dropped drastically several times. But since this is election season, the opposition is raking up the issue,\\u201d she said. BJP had poached Bharati Pawar from NCP before the 2019 elections, giving her the ticket instead of the then MP Harischandra Chavan. Bhagare, a political greenhorn, faced the setback of four party MLAs switching to deputy CM Ajit Pawar\\u2019s NCP camp. But he hopes farmers\\u2019 ire will see anti-BJP voters rally around him. \\u201cGiven the anger among onion growers, my opponent\\u2019s defeat is certain. Though our MLAs have deserted us, we are counting on Sharad Pawar\\u2019s popularity among the farmers,\\u201d Bhagare said at a campaign rally.\",\n          \"India&rsquo;s 18th Lok Sabha Elections, the largest democratic exercise on the planet, will conclude on 1 June, 2024 as the seventh phase comes to a close . As the lengthy 44-day electoral process ends, attention will shift to exit polls, which are expected to provide insights into the election outcomes starting from 6:30 pm on 1 June.\\nExit polls are crucial for gauging the mood of the electorate and predicting the likely winners before the official results are declared. However, their accuracy and methodology are often subjects of debate and scrutiny.\\nAdvertisement What is the methodology behind exit polls?\\nExit polls are conducted by surveying voters immediately after they cast their votes. This method contrasts with opinion polls, which are conducted before the elections to gather voters&rsquo; views on various issues and candidates. Exit polls aim to provide a snapshot of voting trends, influenced by various factors such as issues, personalities, and party loyalties.\\nThe methodology of exit polls involves interviewing voters outside polling stations using a structured questionnaire. This approach relies on the voters&rsquo; recent experiences, increasing the likelihood of obtaining accurate responses.\\nWomen voters show their index fingers marked with an indelible ink after casting their vote in the sixth round of polling in India&rsquo;s national election in Prayagraj, 25 May, 2024. AP The data collected is then analysed to estimate vote shares and predict seat outcomes. These polls are typically conducted by private firms or media organisations rather than government agencies.\\nHow has technology changed conducting exit polls?\\nTechnological advancements have significantly influenced the conduct of exit polls. Techniques such as call-backs to respondents, images of interviews being conducted, phone calls from the field, and WhatsApp groups have enhanced data collection and analysis.\\nDespite these advancements, ensuring the accuracy of predictions remains challenging due to the complex and diverse nature of the Indian electorate.\\nA voter with hennaed hands gets her finger marked with an indelible ink as she casts her vote in the sixth round of polling in India&rsquo;s national election in New Delhi, 25 May, 2024. AP Structured questionnaires are vital for coherent data collection and systematic analysis, reported Indian Express. The Centre for the Study of Developing Societies (CSDS) emphasises the importance of representative samples in ensuring accurate predictions. A large sample size is crucial, but the representativeness of the sample is equally important.\\nAdvertisement What challenges are faced while conducting exit polls?\\nEstimating vote shares and predicting seat outcomes are the primary challenges in conducting exit polls. The swing model, which relies on past election results, is influenced by various factors such as geographic location, caste, religion, and economic class.\\nChanges in political alliances between elections can also affect predictions. The prediction process is labour-intensive and time-consuming, as it involves making estimates for each seat.\\nA woman shows the indelible ink mark on her index finger after casting her vote during the sixth round of polling in India&rsquo;s national election in Khilan Village, south of Srinagar, 25 May, 2024. AP The complexity of swings increases with the number of political players. For example, the BJP and JD(U) alliance in Bihar poses a challenge for the swing model. Over- or under-representation of diverse voter sections can impact the accuracy of estimates.\\nAdvertisement How accurate are exit polls?\\nThe accuracy of exit polls depends on various factors beyond sample size. The representativeness of the sample, the methodology used, and the ability to account for diverse voter profiles are critical. Some agencies rely on innovative methods, such as eliminating certain constituencies from the poll, to improve accuracy.\\nAlso Read: Predictions, predilections, and Indian general elections For instance, the Lokniti-CSDS uses post-poll surveys with large sample sizes but echoes the need for representative samples. Their predictions have varied in accuracy, highlighting the complexities involved in electoral predictions.\\nHave exit polls ever got it wrong?\\nHistorically, exit polls have had mixed accuracy. Some notable instances where exit polls diverged significantly from actual results include:\\nAdvertisement 2004 Lok Sabha Elections: Exit polls predicted a majority for the Atal Bihari Vajpayee-led NDA government. However, the actual results saw the NDA falling short of expectations.\\nDelhi Assembly Elections 2015: The Aam Aadmi Party (AAP) secured a sweeping victory with 67 out of 70 seats, which was underestimated by exit polls.\\nBihar Assembly Elections 2015: Exit polls predicted a close race, but the RJD-JDU-Congress coalition won decisively.\\nUP Assembly Elections 2017: Despite exit polls predicting a hung assembly, the BJP won over 300 seats.\\n2014 Lok Sabha Elections: Exit polls did not foresee the BJP achieving an outright majority, which it did by crossing the 272-mark on its own.\\nIn India, exit polls are regulated under Section 126A of the Representation of the People Act, 1951. This section prohibits the conduct and publication of exit polls during the polling period to avoid influencing voters.\\nAlso Read |\\u00a0Bharat and its elections: The wonder that is India The Election Commission (EC) enforces a ban on exit polls from the beginning of polling hours on the first day until 30 minutes after the closing of polls on the last day of all phases.\\nWith inputs from agencies\\n\",\n          \"CHENNAI: Poised for a three-cornered battle, Tamil Nadu, along with Puducherry would go to polls on April 19 in a single-phase election. The Vilavancode assembly constituency by-election is also scheduled to be held the same day. The model code of conduct came into effect along with the announcement of the election date by Chief Election Commissioner Rajiv Kumar on Saturday afternoon. Tamil Nadu has 39 Lok Sabha constituencies while Puducherry has one. Videos 02:50 PM Modi's Big Prediction For June 4 Lok Sabha Election Counting Day | Watch 1 hour ago 00:54 Kejriwal\\u2019s Battle Cry: Vote 'Jhaddu' for Free Delhi 15 hours ago 00:54 UP CM Yogi Adityanath: 'Aurangzeb's soul has entered Congress and SP ' 1 day ago 00:59 CM Kejriwal: BJP's Arrest Attempt Over Education Push Backfires! 1 day ago 03:00 'Modi's Leadership...': Psephologist Dhananjay Joshi on Variables At Play In Elections 2014, 2019 And 2024 1 day ago 03:28 2024 Elections: Can Swing Voters Impact Verdict? Are Bihar, Maharashtra Swing States? Sanjay Jha, Rahul Verma Weigh In 1 day ago 03:50 \\\"Will Modi-led NDA Repeat the 2019 Dream Run? Trends, Challenges, and Twists for Elections 2024\\\" 1 day ago 15:42 'Gaddar Sena': Uddhav Sena's Priyanka Chaturvedi On Maharashtra Vote; 'Less Than 23 Seats For BJP' 1 day ago 05:22 \\u2018Modi Ji, I\\u2019m Coming\\u2019 Arvind Kejriwal Declares \\u2018Jail Bharo\\u2019 Dare After Bibhav Kumar\\u2019s Arrest | Watch 2 days ago 00:59 Bharti Blasts BJP: Calls for End to Divisive Politics and Focus on Substance 2 days ago 1 2 3 4 5 6 With Prime Minister Narendra Modi having addressed a series of rallies in Chennai, Tirupur, Tirunelveli and Kanyakumari besides his scheduled road show in Coimbatore on March 18, BJP is racing ahead of its rivals in organising strategic campaigns for Tamil Nadu besides other southern states. Yet another public meeting has been planned in Salem on March 19, when BJP is expected to showcase its alliance strength and introduce its candidates for Tamil Nadu. The BJP-led alliance would be pitted against a powerful DMK-led formation besides a small group of constituents led by AIADMK. Bypoll will not be held for Tirukkoyilur assembly seat : Sahoo The Vilavancode assembly byelection was necessitated by resignation of Congress MLA Vijayadharani , who joined BJP. Chief electoral officer Satyabrata Sahoo clarified that the bypoll would not be held for Tirukkoyilur assembly seat represented by DMK leader K Ponmudy . Supreme Court had last week suspended Ponmudy's conviction and sentence in an assets case . Sahoo said electronic voting machines and VVPATs have been kept ready for the polls and arrangements made in the poll booths for easy access to differently abled. \\\"The number of sensitive booths will change based on the announcement of candidates,\\\" Sahoo said. The designated number of flying and static surveillance teams would take charge in each assembly constituency soon. To a query, the CEO said, \\\"Election campaigns on the basis of religion would not be permitted.\\\" Applications for inclusion of names in the electoral rolls could be submitted 10 days before the last date for nominations, and the names would be part of the electoral roll based on the verification process. Action has been taken to deliver the elector's photo identity card through the postal department to those whose names were included until Dec 9.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"news_source\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Foxnews\",\n          \"Firstpost\",\n          \"TheHindu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"India\",\n          \"US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"news_label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"processed_text\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"article_sentiment_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1252720820705763,\n        \"min\": -0.375,\n        \"max\": 0.5625,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          0.061853832442067734,\n          0.0643877551020408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vader_sentiment_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7545208452757586,\n        \"min\": -1.0,\n        \"max\": 0.9999,\n        \"num_unique_values\": 298,\n        \"samples\": [\n          -0.895,\n          0.6409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PERSON\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ORG\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GPE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TIME\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CARDINAL\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MONEY\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NORP\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":131}]},{"cell_type":"markdown","source":["###Calculate Sentiment scores"],"metadata":{"id":"wf8bGnw8uhAY"}},{"cell_type":"code","source":["import pandas as pd\n","import spacy\n","from textblob import TextBlob\n","\n","# Load the spaCy model\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# Function to extract NORP entities\n","def extract_norp_entities(text):\n","    doc = nlp(text)\n","    return [ent.text for ent in doc.ents if ent.label_ == 'NORP']\n","\n","# Function to calculate sentiment score of a sentence\n","def sentiment_score(text):\n","    return TextBlob(text).sentiment.polarity\n","\n","# Ensure all entries in 'processed_text' are strings\n","df_concat['processed_text'] = df_concat['processed_text'].astype(str)\n","\n","# Extract NORP entities and calculate sentiment scores\n","norp_sentiments = []\n","\n","for index, row in df_concat.iterrows():\n","    text = row['processed_text']\n","    entities = extract_norp_entities(text)\n","    for entity in entities:\n","        for sent in text.split('.'):\n","            if entity in sent:\n","                score = sentiment_score(sent)\n","                norp_sentiments.append({'Entity': entity, 'Sentiment': score})\n","\n","# Convert results to DataFrame\n","norp_sentiment_df = pd.DataFrame(norp_sentiments)\n","\n","# Display the first few rows\n","print(norp_sentiment_df.head())\n","\n","# Aggregate sentiment scores by entity\n","entity_sentiment_summary = norp_sentiment_df.groupby('Entity')['Sentiment'].mean().reset_index()\n","\n","# Display aggregated sentiment scores\n","print(entity_sentiment_summary)\n"],"metadata":{"id":"LUIQ0vMoyyQ9","executionInfo":{"status":"ok","timestamp":1717398484185,"user_tz":-480,"elapsed":165682,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"90de632c-e06a-4871-9998-763046dc6d51"},"execution_count":156,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["        Entity  Sentiment\n","0      chinese  -0.010646\n","1  republicans  -0.016133\n","2   republican  -0.016133\n","3   republican  -0.016133\n","4     american  -0.016133\n","         Entity  Sentiment\n","0       african   0.134892\n","1      american   0.078539\n","2     americans   0.053396\n","3       chinese   0.030212\n","4     christian   0.139036\n","5      democrat   0.059952\n","6     democrats  -0.004204\n","7      european   0.026025\n","8        french   0.056542\n","9        german   0.061854\n","10     hispanic  -0.008649\n","11      indians   0.060942\n","12   indonesian   0.110870\n","13      israeli   0.054050\n","14     japanese   0.089203\n","15      khudian   0.019869\n","16       korean   0.035205\n","17       muslim   0.070078\n","18      muslims   0.047420\n","19         nazi   0.116588\n","20       ohioan  -0.100673\n","21  palestinian   0.076218\n","22   republican   0.071978\n","23  republicans   0.065537\n","24      russian   0.116136\n","25      spanish  -0.008649\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import spacy\n","from textblob import TextBlob\n","\n","# Load the spaCy model\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# Function to extract NORP entities\n","def extract_norp_entities(text):\n","    doc = nlp(text)\n","    return [ent.text for ent in doc.ents if ent.label_ == 'NORP']\n","\n","# Function to calculate sentiment score of a sentence\n","def sentiment_score(text):\n","    return TextBlob(text).sentiment.polarity\n","\n","# Ensure all entries in 'processed_text' are strings\n","df_concat['processed_text'] = df_concat['processed_text'].astype(str)\n","\n","# Extract NORP entities and calculate sentiment scores\n","norp_sentiments = []\n","\n","for index, row in df_concat.iterrows():\n","    text = row['processed_text']\n","    news_source = row['news_source']\n","    country = row['country']\n","    entities = extract_norp_entities(text)\n","    for entity in entities:\n","        for sent in text.split('.'):\n","            if entity in sent:\n","                score = sentiment_score(sent)\n","                norp_sentiments.append({\n","                    'Entity': entity,\n","                    'Sentiment': score,\n","                    'News_Source': news_source,\n","                    'Country': country\n","                })\n","\n","# Convert results to DataFrame\n","norp_sentiment_df = pd.DataFrame(norp_sentiments)\n","\n","# Display the first few rows\n","print(norp_sentiment_df.head())\n","\n","# Aggregate sentiment scores by entity, news source, and country\n","entity_sentiment_summary = norp_sentiment_df.groupby(['News_Source', 'Country', 'Entity'])['Sentiment'].mean().reset_index()\n","\n","# Display aggregated sentiment scores\n","print(entity_sentiment_summary)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"exfviLAIoWoG","executionInfo":{"status":"ok","timestamp":1717398620589,"user_tz":-480,"elapsed":136410,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"4caffe10-b270-40b3-b9a1-50a0f037a71d"},"execution_count":157,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"stream","name":"stdout","text":["        Entity  Sentiment News_Source Country\n","0      chinese  -0.010646     CBSnews      US\n","1  republicans  -0.016133     CBSnews      US\n","2   republican  -0.016133     CBSnews      US\n","3   republican  -0.016133     CBSnews      US\n","4     american  -0.016133     CBSnews      US\n","       News_Source Country       Entity  Sentiment\n","0          CBSnews      US      african   0.010831\n","1          CBSnews      US     american   0.084833\n","2          CBSnews      US    americans  -0.080148\n","3          CBSnews      US      chinese   0.034022\n","4          CBSnews      US     democrat   0.056259\n","5          CBSnews      US    democrats  -0.031962\n","6          CBSnews      US     european   0.026025\n","7          CBSnews      US       french   0.056542\n","8          CBSnews      US       german   0.061854\n","9          CBSnews      US     hispanic  -0.008649\n","10         CBSnews      US      indians  -0.068802\n","11         CBSnews      US      israeli   0.054050\n","12         CBSnews      US     japanese  -0.002081\n","13         CBSnews      US       korean   0.035205\n","14         CBSnews      US       muslim  -0.106041\n","15         CBSnews      US       ohioan  -0.100673\n","16         CBSnews      US  palestinian   0.073428\n","17         CBSnews      US   republican   0.058959\n","18         CBSnews      US  republicans   0.061106\n","19         CBSnews      US      russian   0.116136\n","20         CBSnews      US      spanish  -0.008649\n","21       Firstpost   India    americans   0.071282\n","22       Firstpost   India      indians   0.071282\n","23       Firstpost   India     japanese   0.116588\n","24       Firstpost   India       muslim   0.116588\n","25       Firstpost   India         nazi   0.116588\n","26         Foxnews      US     american   0.032383\n","27         Foxnews      US    americans   0.008076\n","28         Foxnews      US     democrat   0.071366\n","29         Foxnews      US    democrats   0.023554\n","30         Foxnews      US  palestinian   0.109691\n","31         Foxnews      US   republican   0.109885\n","32         Foxnews      US  republicans   0.080306\n","33        TheHindu   India      african   0.165907\n","34        TheHindu   India      chinese  -0.027563\n","35        TheHindu   India    christian   0.135237\n","36        TheHindu   India   indonesian   0.110870\n","37        TheHindu   India       muslim   0.053927\n","38        TheHindu   India      muslims   0.038970\n","39  Times of India   India      chinese   0.084797\n","40  Times of India   India    christian   0.141570\n","41  Times of India   India      indians   0.087279\n","42  Times of India   India      khudian   0.019869\n","43  Times of India   India       muslim   0.120260\n","44  Times of India   India      muslims   0.061503\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Group by entity, news source, and country\n","grouped_data = entity_sentiment_summary.groupby(['Entity', 'News_Source', 'Country']).mean().reset_index()\n","\n","# Set up the figure and axis\n","plt.figure(figsize=(12, 8))\n","ax = plt.gca()\n","\n","# Plot the grouped bar plot\n","grouped_data.pivot_table(index=['Entity', 'Country'], columns='News_Source', values='Sentiment').plot(kind='bar', ax=ax)\n","\n","# Customize the plot\n","plt.title('Average Sentiment Scores by Entity, News Source, and Country')\n","plt.xlabel('Entity, Country')\n","plt.ylabel('Average Sentiment Score')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend(title='News Source')\n","\n","# Show plot\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"2IFxEubev3ys","executionInfo":{"status":"ok","timestamp":1717398622146,"user_tz":-480,"elapsed":1583,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"fb22100e-61a4-45bc-c2e9-00c2df9593da"},"execution_count":158,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Filter data for CBS News and Fox News in the US\n","us_data = entity_sentiment_summary[(entity_sentiment_summary['News_Source'].isin(['CBSnews', 'Foxnews'])) & (entity_sentiment_summary['Country'] == 'US')]\n","\n","# Filter data for news sources in India excluding CBS News and Fox News\n","india_data = entity_sentiment_summary[(entity_sentiment_summary['News_Source'].isin(['Firstpost', 'TheHindu', 'Times of India'])) & (entity_sentiment_summary['Country'] == 'India')]\n","\n","# Set up the figure and axis for US data\n","plt.figure(figsize=(12, 6))\n","ax1 = plt.subplot(1, 2, 1)\n","\n","# Plot the grouped bar plot for US data\n","us_data.pivot_table(index='Entity', columns='News_Source', values='Sentiment').plot(kind='bar', ax=ax1, color=['blue', 'green'])\n","\n","# Customize the plot for US data\n","plt.title('Average Sentiment Scores for US (CBS News vs Fox News)')\n","plt.xlabel('Entity')\n","plt.ylabel('Average Sentiment Score')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend(title='News Source')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":704},"id":"itH7gG0EwJpY","executionInfo":{"status":"ok","timestamp":1717398622972,"user_tz":-480,"elapsed":845,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"95184e4e-77d0-4cf1-d637-1063bab2950a"},"execution_count":159,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f66b9b91b10>"]},"metadata":{},"execution_count":159},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"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s2YNmjdvDgC4fv06PDw8cOLECVSsWBHA+56QrVu3flLikVOe0f8h/kYEaRv3wU/H346h1OSU81KO6Ak5ceIELC0tlQQEAGrWrAkdHR2cPHky1XnOnj2LuLg41KxZUxnm7u6OAgUK4MSJE2rT9urVCzY2NvD29sayZcvwsbwsJiYGkZGRai8iIiLSTB5tB5ARoaGhsLOzUxuWJ08eWFtbIzQ0NM159PX1YWlpqTY8X758avP89ttvqFGjBoyNjbF//3707NkTUVFR6Nu3b5rxTJw4EWPGjMn8ChEREZF2e0KGDh2aamFo8tf169ezNYYRI0agSpUqKFu2LIYMGYLBgwfjjz/+SHeeYcOGISIiQnk9ePAgW2MkIiLKjbTaE/Lzzz+jQ4cO6U7j6uoKe3t7PHv2TG14fHw8wsLCYG9vn+p89vb2iI2NRXh4uFpvyNOnT9OcBwAqVKiAsWPHIiYmBgYGBqlOY2BgkOY4IiIiyhitJiG2trawtbX96HSVKlVCeHg4zp49Cy8vLwDA33//jcTERFSoUCHVeby8vKCnp4dDhw6hWbNmAIAbN27g/v37qFSpUprLunDhAqysrJhkEBERZbMcURPi4eGBOnXqoGvXrliwYAHi4uLQu3dvtG7dWrkz5tGjR/D398eqVavg7e0NCwsLdO7cGQMGDIC1tTXMzc3Rp08fVKpUSbkzZufOnXj69CkqVqwIQ0NDHDhwABMmTMDAgQO1ubpERERfhRyRhABAQEAAevfuDX9/f+jo6KBZs2aYNWuWMj4uLg43btxAdHS0Mmz69OnKtDExMahduzbmzZunjNfT08PcuXPx008/QUTg5uaGadOmoWvXrp913YiIiL5GOeI5IV+6nHI/9of4PADSNu6Dn47PCaHU5JTzUo54TggRERHlPkxCiIiISCuYhBAREZFWMAkhIiIirWASQkRERFrBJISIiIi0gkkIERERaQWTECIiItIKJiFERESkFUxCiIiISCuYhBAREZFWMAkhIiIirWASQkRERFrBJISIiIi0gkkIERERaQWTECIiItIKJiFERESkFUxCiIiISCuYhBAREZFWMAkhIiIirWASQkRERFrBJISIiIi0gkkIERERaQWTECIiItIKJiFERESkFUxCiIiISCuYhBAREZFWMAkhIiIirWASQkRERFqRR9sBENHXS0TbERCRNrEnhIiIiLSCSQgRERFpBZMQIiIi0gomIURERKQVTEKIiIhIK5iEEBERkVYwCSEiIiKtYBJCREREWsEkhIiIiLSCSQgRERFpBZMQIiIi0gomIURERKQVTEKIiIhIK5iEEBERkVYwCSEiIiKtYBJCREREWsEkhIiIiLSCSQgRERFpBZMQIiIi0gomIURERKQVebQdAGmPiLYjICKirxl7QoiIiEgrmIQQERGRVjAJISIiIq1gEkJERERawSSEiIiItIJJCBEREWkFkxAiIiLSCiYhREREpBVMQoiIiEgrmIQQERGRVjAJISIiIq1gEkJERERawSSEiIiItIJJCBEREWkFkxAiIiLSCiYhREREpBVMQoiIiEgrmIQQERGRVjAJISIiIq1gEkJERERawSSEiIiItIJJCBEREWkFkxAiIiLSCiYhREREpBVMQoiIiEgrmIQQERGRVjAJISIiIq1gEkJERERawSSEiIiItIJJCBEREWkFkxAiIiLSCiYhREREpBU5JgkJCwtD27ZtYW5uDktLS3Tu3BlRUVHpzrNo0SJUq1YN5ubmUKlUCA8Pz5J2iYiI6NPlmCSkbdu2uHLlCg4cOIBdu3bhyJEj6NatW7rzREdHo06dOhg+fHiWtktERESfTiUiou0gPubatWvw9PTE6dOnUa5cOQDA3r17Ua9ePTx8+BCOjo7pzh8YGIjq1avj1atXsLS0zLJ2k0RGRsLCwgIREREwNzfP3EoSEWWCSpVy2Kcc1bO6PdKOnHJeyhE9ISdOnIClpaWSKABAzZo1oaOjg5MnT35x7RIREdHH5dF2ABkRGhoKOzs7tWF58uSBtbU1QkNDP3u7MTExiImJUf6OjIzMdAxERERfK632hAwdOhQqlSrd1/Xr17UZYqomTpwICwsL5eXs7KztkIiIiHIcrfaE/Pzzz+jQoUO607i6usLe3h7Pnj1TGx4fH4+wsDDY29tnevmZbXfYsGEYMGCA8ndkZCQTESLKFVj/QZ+TVpMQW1tb2NrafnS6SpUqITw8HGfPnoWXlxcA4O+//0ZiYiIqVKiQ6eVntl0DAwMYGBhkerlERESUQwpTPTw8UKdOHXTt2hWnTp3CsWPH0Lt3b7Ru3Vq5g+XRo0dwd3fHqVOnlPlCQ0Nx4cIF3Lp1CwBw6dIlXLhwAWFhYRlul4iIiLJHjkhCACAgIADu7u7w9/dHvXr14OPjg0WLFinj4+LicOPGDURHRyvDFixYgLJly6Jr164AAF9fX5QtWxY7duzIcLtERESUPXLEc0K+dDnlfmwiyn34XA9KTU45L+WYnhAiIiLKXZiEEBERkVYwCSEiIiKtYBJCREREWsEkhIiIiLQiR/x2DBERpY53wlBOxp4QIiIi0gomIURERKQVTEKIiIhIK5iEEBERkVYwCSEiIiKtYBJCREREWsEkhIiIiLSCSQgRERFpBZMQIiIi0gomIURERKQVTEKIiIhIK5iEEBERkVYwCSEiIiKtYBJCREREWsEkhIiIiLSCSQgRERFpBZMQIiIi0gomIURERKQVTEKIiIhIK/JoO4DcQEQAAJGRkVqOhIiI6P/OR0nnpy8Vk5As8Pr1awCAs7OzliMhIiL6P69fv4aFhYW2w0iTSr70NCkHSExMxOPHj2FmZgaVSpXmdJGRkXB2dsaDBw9gbm7+yctle7m7vexok+3l7vayo022lzPbExG8fv0ajo6O0NH5cisv2BOSBXR0dJA/f/4MT29ubp5lBxy2l/vby4422V7ubi872mR7Oa+9L7kHJMmXmx4RERFRrsYkhIiIiLSCSchnZGBggFGjRsHAwIDtsT2ttMn2cnd72dEm28vd7WkbC1OJiIhIK9gTQkRERFrBJISIiIi0gkkIERERaQWTECIiItIKJiFERESkFUxCSGuS35gVFxenxUgoJ9mwYQOePn2q7TCIKAswCfkKJJ3sY2NjtRyJOpVKpZxM9PT0cPDgQWzatOmT281pv2r8td0ln9n1TUxMxPXr19GtW7cs3ZcTExNTDPva3hMibWES8gmSDlRv375VOyhm9gCWNN+bN28QExPzye0lzatSqbB//35MmDABN2/e/KS2ACAkJAT79u3DihUrEB0dnepBPCMiIiLg5+eHXr164a+//kKtWrVgaGiY6fiSYlSpVNizZw9at26NM2fOfFJ7acnMOsfGxirbMCwsDDExMUhISIBKpcr0Nkzy6tWrT5o/SfI43r59myVtJq3znTt3EB0dne6PPH4sNnd3d9y7dw/Ozs64fPkynjx58kmxJSYmKj/udeXKFVy9ehW3bt3KdIzA/61vdiUyn9pu0vzPnj3Du3fv8ObNGwCZ26fTmi8hIeGT48sq2blPp7UcTdpJa76vJhEWypTExEQREdmxY4f4+flJzZo1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\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(12, 6))\n","ax2 = plt.subplot(1, 2, 1)\n","\n","\n","# Plot the grouped bar plot for India data\n","india_data.pivot_table(index='Entity', columns='News_Source', values='Sentiment').plot(kind='bar', ax=ax2)\n","\n","# Customize the plot for India data\n","plt.title('Average Sentiment Scores for India ')\n","plt.xlabel('Entity')\n","plt.ylabel('Average Sentiment Score')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend(title='News Source')\n","\n","# Adjust layout and display plot\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"VJsRegsm3ooE","executionInfo":{"status":"ok","timestamp":1717397789155,"user_tz":-480,"elapsed":1290,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"0716f7fd-8b6d-4506-8fd7-c90853bcd88c"},"execution_count":153,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["can you help me do this for ORG entity as well please"],"metadata":{"id":"-7mJjqO6x5Yw"}},{"cell_type":"code","source":["import pandas as pd\n","import spacy\n","from textblob import TextBlob\n","\n","# Load the spaCy model\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# Function to extract NORP entities\n","def extract_person_entities(text):\n","    doc = nlp(text)\n","    return [ent.text for ent in doc.ents if ent.label_ == 'PERSON']\n","\n","# Function to calculate sentiment score of a sentence\n","def sentiment_score(text):\n","    return TextBlob(text).sentiment.polarity\n","\n","# Ensure all entries in 'processed_text' are strings\n","df_concat['processed_text'] = df_concat['processed_text'].astype(str)\n","\n","# Extract NORP entities and calculate sentiment scores\n","norp_sentiments = []\n","\n","for index, row in df_concat.iterrows():\n","    text = row['processed_text']\n","    news_source = row['news_source']\n","    country = row['country']\n","    entities = extract_person_entities(text)\n","    for entity in entities:\n","        for sent in text.split('.'):\n","            if entity in sent:\n","                score = sentiment_score(sent)\n","                person_sentiments.append({\n","                    'Entity': entity,\n","                    'Sentiment': score,\n","                    'News_Source': news_source,\n","                    'Country': country\n","                })\n","\n","# Convert results to DataFrame\n","person_sentiment_df = pd.DataFrame(person_sentiments)\n","\n","# Display the first few rows\n","print(person_sentiment_df.head())\n","\n","# Aggregate sentiment scores by entity, news source, and country\n","entitypersong_sentiment_summary = person_sentiment_df.groupby(['News_Source', 'Country', 'Entity'])['Sentiment'].sum().reset_index()\n","\n","# Display aggregated sentiment scores\n","print(entitypersong_sentiment_summary)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"RWIsIzzzx4Pt","executionInfo":{"status":"error","timestamp":1717398624739,"user_tz":-480,"elapsed":922,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}},"outputId":"bca79efc-c02e-42d3-b093-a7b9b794ee16"},"execution_count":160,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning:\n","\n","`should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'person_sentiments' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-160-5ac08db0953c>\u001b[0m in \u001b[0;36m<cell line: 23>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mentity\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m                 \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msentiment_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m                 person_sentiments.append({\n\u001b[0m\u001b[1;32m     33\u001b[0m                     \u001b[0;34m'Entity'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mentity\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m                     \u001b[0;34m'Sentiment'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mscore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'person_sentiments' is not defined"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Filter data for CBS News and Fox News in the US\n","us_data = entitypersong_sentiment_summary[(entitypersong_sentiment_summary['News_Source'].isin(['CBSnews', 'Foxnews'])) & (entitypersong_sentiment_summary['Country'] == 'US')]\n","\n","# Filter data for news sources in India excluding CBS News and Fox News\n","india_data = entitypersong_sentiment_summary[(entitypersong_sentiment_summary['News_Source'].isin(['Firstpost', 'TheHindu', 'Times of India'])) & (entitypersong_sentiment_summary['Country'] == 'India')]\n","\n","# Set up the figure and axis for US data\n","plt.figure(figsize=(12, 6))\n","ax1 = plt.subplot(1, 2, 1)\n","\n","# Plot the grouped bar plot for US data\n","us_data.pivot_table(index='Entity', columns='News_Source', values='Sentiment').plot(kind='bar', ax=ax1, color=['blue', 'green'])\n","\n","# Customize the plot for US data\n","plt.title('Average Sentiment Scores for US (CBS News vs Fox News)')\n","plt.xlabel('Entity')\n","plt.ylabel('Average Sentiment Score')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend(title='News Source')\n","\n","# Set up the axis for India data\n","ax2 = plt.subplot(1, 2, 2)\n","\n","# Plot the grouped bar plot for India data\n","india_data.pivot_table(index='Entity', columns='News_Source', values='Sentiment').plot(kind='bar', ax=ax2)\n","\n","# Customize the plot for India data\n","plt.title('Average Sentiment Scores for India ')\n","plt.xlabel('Entity')\n","plt.ylabel('Average Sentiment Score')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend(title='News Source')\n","\n","# Adjust layout and display plot\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"foYmNoUSyWG2","executionInfo":{"status":"aborted","timestamp":1717398624741,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jasmine Singh","userId":"12082738895923108038"}}},"execution_count":null,"outputs":[]}]}